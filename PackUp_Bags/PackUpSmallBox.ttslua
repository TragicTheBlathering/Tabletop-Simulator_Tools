additive = true -- This will disable the additive save system, Meaning that after the first pack, each time you unpack and then pack it will only move the same items to the same places as originally chosen.

UseBagGMNotesButtonName = true -- If this is clicked the GMNOTE of the bag will be used for the buttons name instead of "PackUp"
    PlaceWidth = 150 -- you may need to edit this value to adjust width of button if you use GMNote as Button Name

RestrictButtonsByHost = true -- Restrict Buttons to HOST only.
    RestrictButtonsByColour = nil -- (ignored if restricted by host) : Change NIL to a PlayerColour to restrict button activation to that player only. 'Black', 'White', 'Orange'.. etc etc

--[[****************************************************************************
**** Switches to Control selected items ****************************************
********************************************************************************]]
-- Any Zones with the correct GMNOTE will be used.
-- Replace <BagName> with the Packup Bag's Name (Case Insensitive. Can use spaces) : Example : PackUpZone_DEMO BAG
-- PackUpZone_<BagName>

-- Some Objects you may want to force to be included in apack up, even if outside the script zone.. just place the GUID here.
-- remember ANYTHING with the TAG "PackUpItem_<BagName>" will also be added. It is BEST to use Tags instead of GUIDs!! Replace <BagName> with the name of the bag!
forceGUID = {}

--- Ignore List ----------------------------------------------------------------
-- Use general item Types here (like 'Deck', 'Card', 'Bag', etc etc)
ignoreTYPE  = {}

-- Put in "EXACT" names in here. : CaseINseneitive : This code will not work with BBcode formatting
ignoreNAME = {}

-- Put in keyword to SEARCH the Description. : CaseINseneitive : This code will not work with BBcode formatting
ignoreDESC = {}

-- Ignore by GUID
ignoreGUID = {}

-- Ignore by TAG
-- Anything tagged with "PackUpItem_<BagName>_ignore" will also be ignored. Replace <BagName> with the name of the bag!

--[[****************************************************************************
****** DO NOT EDIT BELOW THIS LINE (unless you know what you are doing!) *******
*******************************************************************************]]

--------------------------------------------------------------------------------
-- PICKUP Function -------------------------------------------------------------
--------------------------------------------------------------------------------
function PickUpStuff(obj, col, alt_click)
    if not RestrictButtonsByHost then
        if RestrictButtonsByColour == nil then
            run_PickupStuff()
        else
            if col == RestrictButtonsByColour then
                run_PickupStuff()
            else
                broadcastToAll('Button Restricted to the '..string.upper(RestrictButtonsByColour)..' Player only!', 'Red')
            end
        end
    else
        if Player[col].host then
            run_PickupStuff()
        else
            broadcastToAll('Button Restricted to the HOST Player only!', 'Red')
        end
    end
end

function run_PickupStuff()
    local PosAboveBag = self.getPosition()
    PosAboveBag.y = PosAboveBag.y+self.getBounds().size.y+0.5

    local packUpList = {}
    -- Add all correctly tagged and FORCED items to packUpList
    for _,obj in pairs(getAllObjects()) do
        if obj.hasTag(TagedItem) then
            local add = true
            for _, list in ipairs(ignoreDESC) do if string.find(string.lower(obj.getDescription()), string.lower(list), 1, true) then add = false end end
            for _, list in ipairs(ignoreNAME) do if string.lower(obj.getName()) == string.lower(list) then add = false end end
            for _, list in ipairs(ignoreTYPE) do if obj.type                    == list then add = false end end
            for _, list in ipairs(ignoreGUID) do if obj.getGUID()               == list then add = false end end
            if obj.hasTag('PackUpItem_'..self.getName()..'_ignore') then add = false end
            if add == true then
                table.insert(packUpList, obj)
            end
        else
            for _, fguid in ipairs(forceGUID) do
                if fguid == obj.getGUID() then
                    local add = true
                    for _, list in ipairs(ignoreDESC) do if string.find(string.lower(obj.getDescription()), string.lower(list), 1, true) then add = false end end
                    for _, list in ipairs(ignoreNAME) do if string.lower(obj.getName()) == string.lower(list) then add = false end end
                    for _, list in ipairs(ignoreTYPE) do if obj.type                    == list then add = false end end
                    for _, list in ipairs(ignoreGUID) do if obj.getGUID()               == list then add = false end end
                    if obj.hasTag('PackUpItem_'..self.getName()..'_ignore') then add = false end
                    if add == true then
                        table.insert(packUpList, obj)
                    end
                end
            end
        end
    end

    if additive then
        -- Find ZONES via gm_notes that match this pack up bag
        local packUpZones = {}
        for k,v in pairs(getAllObjects()) do
            if v.type == 'Scripting' then
                if string.find(string.lower(v.getGMNotes()), string.lower('PackUpZone_'..self.getName()), 1, true) then
                    table.insert(packUpZones, v)
                end
            end
        end
        -- Add all objects in the found Zones to the packup list (excluding duplicates + ignore Lists)
        for _,zone in pairs(packUpZones) do
            for _, obj in pairs(zone.getObjects()) do
                local add = true
                for _, list in ipairs(ignoreDESC) do if string.find(string.lower(obj.getDescription()), string.lower(list), 1, true) then add = false end end
                for _, list in ipairs(ignoreNAME) do if string.lower(obj.getName()) == string.lower(list) then add = false end end
                for _, list in ipairs(ignoreTYPE) do if obj.type                    == list then add = false end end
                for _, list in ipairs(ignoreGUID) do if obj.getGUID()               == list then add = false end end
                if obj.hasTag('PackUpItem_'..self.getName()..'_ignore') then add = false end
                if add == true then
                    table.insert(packUpList, obj)
                end
            end
        end
    end

    -- Pack up all items in the packUpList
    local count = 0
    local offset = 0

    packUpList = removeDuplicates(packUpList)
    sortObjectListbyName(packUpList)
    packUpList = reverseList(packUpList)

    for guid, obj in pairs(packUpList) do
        obj.addTag('PackUpItem_'..self.getName())
        if additive then createSaveData(obj) end
        count=count+1
        Wait.time(function()
            self.putObject(obj)
        end, (count-1)*0.023)
    end
end

function reverseList(list)
    local z = {}
         for i = #list, 1, -1 do
             table.insert(z, list[i])
         end
    return z
end

function sortObjectListbyName(list)
    table.sort(list, function(a, b)
        if a.getName() ~= '' and b.getName() ~= '' then
            --if both have names then sort based on their nicknames
            return a.getName() < b.getName()
        elseif a.getName() ~= '' then
            --if only a has a nickname then a should be ahead of b
            return true
        elseif b.getName() ~= '' then
            --if only b has a nickname then b should be ahead of a
            return false
        else
            --if neither have nicknames then sort based on their names
            return a.name <  b.name
        end
        return true
    end)
end

function removeDuplicates(t, key)
    -- make unique keys
    local hash = {}
    if key then
        for _,v in ipairs(t) do
            hash[v[key]] = v
        end
    else
        for _,v in ipairs(t) do
            hash[v] = v
        end
    end
    -- transform keys back into values
    local res = {}
    for k,v in pairs(hash) do
        res[#res+1] = v
    end

    return res
end
--------------------------------------------------------------------------------
-- PLACE Function --------------------------------------------------------------
--------------------------------------------------------------------------------
function PlaceStuff(obj, col, alt_click)
    if not RestrictButtonsByHost then
        if RestrictButtonsByColour == nil then
            run_PlaceStuff()
        else
            if col == RestrictButtonsByColour then
                run_PlaceStuff()
            else
                broadcastToAll('Button Restricted to the '..string.upper(RestrictButtonsByColour)..' Player only!', 'Red')
            end
        end
    else
        if Player[col].host then
            run_PlaceStuff()
        else
            broadcastToAll('Button Restricted to the HOST Player only!', 'Red')
        end
    end
end

function run_PlaceStuff()
    local prams = {}
    local count = 0
    for key, entry in pairs(memoryData) do
        count = count + 1
        Wait.time(function()
            prams.guid = key
            prams.position = {entry.position.x, entry.position.y, entry.position.z}
            prams.rotation = {entry.rotation.x, entry.rotation.y, entry.rotation.z}
            local item = self.takeObject(prams)

            if entry.lock == true then
            item.setPositionSmooth({entry.position.x, entry.position.y, entry.position.z}, false, true)
            item.setRotationSmooth({entry.rotation.x, entry.rotation.y, entry.rotation.z}, false, true)
            item.setLock(entry.lock) end

            if entry.tooltip == 'false' then item.tooltip = false end
            if entry.interactable == 'false' then item.interactable = false end
        end, (count-1)*0.023)
    end
    if additive == true then memoryData = {} end
end
--------------------------------------------------------------------------------
-- Save and Load ---------------------------------------------------------------
--------------------------------------------------------------------------------
--Runs whenever game is saved/autosaved
function onSave()
 --Begin State Managment of Saving Object Data.
 --Create GUID list fomr Object List
    if tableSize(memoryData) == 0 then saved_data = "" return saved_data
    else
        local data_to_save = { md=memoryData }
        saved_data = JSON.encode(data_to_save)
        --saved_data = "" --Remove -- at start + save to clear save data
       return saved_data end
end

function onload(saved_data)
    if saved_data ~= "" then
        local loaded_data = JSON.decode(saved_data)
        --Set up information off of loaded_data
        memoryData = loaded_data.md
    else
        --Set up information for if there is no saved saved data
        memoryData = {}
    end
    TagedItem = 'PackUpItem_'..self.getName()
    SetButtonName()
end
--------------------------------------------------------------------------------
-- Create Button ---------------------------------------------------------------
--------------------------------------------------------------------------------
function SetButtonName()
    if UseBagGMNotesButtonName then -- USE GMNotes for Button Name
        -- You may have to edit the numbers in this block to get a perfect fit to your text.
        if self.getGMNotes() == '' then PlaceText = 'Place' else PlaceText = self.getGMNotes() end
        local splitText = splitString(PlaceText)
        if splitText[2] ~= nil then
            PlaceWidth = string.len(splitText[1])*PlaceWidth
        else
            PlaceWidth = string.len(PlaceText)*180
        end
        PlaceHeight = 450
        PlacePosition = Vector(0, 0-self.getBounds().size.y, 5)
        --local linecount = #splitString(PlaceText)
        local linecount = tableSize(splitText)
        if linecount > 1 then
            PlaceHeight = PlaceHeight * linecount
            PlacePosition.z = PlacePosition.z + 0.3 + (linecount-1)
        end
    else
        PlaceText = 'Place'
        PlaceWidth = 1000
        PlaceHeight = 450
        PlacePosition = {0, -self.getBounds().size.y, 5}
    end
    self.clearButtons()
    makeButtons()
end

function makeButtons(set)
    local buttons = {}
 -- DEFAULT START BUTTONS
    if set == nil then
        button_Place = {
                click_function = 'PlaceStuff',
                function_owner = self,
                label = PlaceText,
                position = PlacePosition,
                rotation = {0, 0, 0},
                width = PlaceWidth,
                height = PlaceHeight,
                scale = {2.8,2.8,2.8},
                font_size = 250,
                color={0,0,0},
                font_color={1,1,1}}
        table.insert(buttons, button_Place)

        button_PickUp = {
            click_function = 'PickUpStuff',
            function_owner = self,
            label = 'Pack Up',
            position = {3.7, -self.getBounds().size.y, -0.4},
            rotation = {0, -90, 0},
            width = 1200,
            height = 500,
            font_size = 250,
            scale = {2.3,2.3,2.3},
            color={0,0,0},
            font_color={1,1,1}}
        table.insert(buttons, button_PickUp) end
 -- Create Buttons
    for _, button in ipairs(buttons) do
        self.createButton(button)
    end
end
--------------------------------------------------------------------------------
-- TOOLS -----------------------------------------------------------------------
--------------------------------------------------------------------------------
function tableSize(t)
    local count = 0
    for key,value in pairs(t) do count = count + 1 end
    return count
end

function createSaveData(obj)
    local objData = {position = tableCullNumericIndexes(obj.getPosition()),
                     rotation = tableCullNumericIndexes(obj.getRotation()),
                     guid = obj.getGUID(),
                     lock = obj.getLock(),
                     interactable = tostring(obj.interactable),
                     tooltip = tostring(obj.tooltip)}

    memoryData[objData.guid] = objData
end

function tableCullNumericIndexes(t)
    for i in pairs(t) do
        if type(i) == "number" then
            table.remove(t, i)
            return tableCullNumericIndexes(t)
        end
    end
    return t
end

function splitString(str, b1, b2)
    local z = {}
        if not str then
            printToAll('splitString(str, sep, b1, b2) : Must Provide a string (at least)', 'Red')
        else
            -- split at NEW LINE
            if not b1 and not b2 then
                for s in str:gmatch("[^\r\n]+") do
                    table.insert(z, s)
                end
            else
            -- split at SEPERATOR
                if b1 and not b2 then
                    if b1 == '' then b1 = ' ' end
                    for s in string.gmatch(str, "([^"..'%'..b1.."]+)") do
                        table.insert(z, s)
                    end
            -- split Between
                elseif b1 and b2 then
                    for s in string.gmatch(str, '%'..b1..'(.-)%'..b2) do
                        table.insert(z, s)
                    end
                end
            end
        end
    return z
end
