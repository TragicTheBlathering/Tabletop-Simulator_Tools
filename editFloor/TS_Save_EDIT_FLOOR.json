{
  "SaveName": "Move FLOOR",
  "EpochTime": 1674799284,
  "Date": "1/27/2023 5:01:24 PM",
  "VersionNumber": "v13.2.2",
  "GameMode": "(tool) Set Scene Floor",
  "GameType": "Utility",
  "GameComplexity": "Low Complexity",
  "PlayingTime": [
    120,
    180
  ],
  "PlayerCounts": [
    0,
    0
  ],
  "Tags": [
    "Scripting",
    "English",
    "Work In Progress"
  ],
  "Gravity": 0.5,
  "PlayArea": 1.0,
  "Table": "Table_None",
  "Sky": "Sky_Regal",
  "SkyURL": "http://cloud-3.steamusercontent.com/ugc/769486004384219672/CBE6398D64D26BA6FBB32DAAE39FA3DBDD414B39/",
  "Note": "",
  "TabStates": {
    "0": {
      "title": "SetUp Instructions",
      "body": "Grid Saves\n5.6x8.2 == ?\n\n4.5x6.5 (Center) == Small Card Target Boards\n1.26x2.68 (Center) == Small Card Dispensers\n",
      "color": "Grey",
      "visibleColor": {
        "r": 0.5,
        "g": 0.5,
        "b": 0.5
      },
      "id": 0
    },
    "12": {
      "title": "Modding",
      "body": ": Grids : \n\nFinal Grid = 198,198 : {0,0}\nPlatform Small Cards = 4.5,6.5 : {0,0}\nPlatform Location Cards = 5.6,8.2 : {0,0}",
      "color": "Black",
      "visibleColor": {
        "r": 0.25,
        "g": 0.25,
        "b": 0.25
      },
      "id": 12
    }
  },
  "MusicPlayer": {
    "RepeatSong": false,
    "PlaylistEntry": 0,
    "CurrentAudioTitle": "Typhons Children - Mission Briefing",
    "CurrentAudioURL": "http://cloud-3.steamusercontent.com/ugc/781859262304608199/3E220047A4B3A0CE8ED3435C5D9FDDE1133CBCC8/",
    "AudioLibrary": [
      {
        "Item1": "http://cloud-3.steamusercontent.com/ugc/781859262304608199/3E220047A4B3A0CE8ED3435C5D9FDDE1133CBCC8/",
        "Item2": "Typhons Children - Mission Briefing"
      },
      {
        "Item1": "http://cloud-3.steamusercontent.com/ugc/781859262301397823/8AFDF3A837114301F1330792C9AFA80CD6EE7E44/",
        "Item2": "Typhons Children - Act 1 - Abes Log"
      },
      {
        "Item1": "http://cloud-3.steamusercontent.com/ugc/781859262304596731/890471B08AADA2F3A7D8CC26E23216365A324C31/",
        "Item2": "Typhons Children - Act 1 - RiverCrossing"
      },
      {
        "Item1": "http://cloud-3.steamusercontent.com/ugc/781859262304595712/46267F4421FFF49CD51105818598B5A4B95B9160/",
        "Item2": "Typhons Children - Act 1 - After Action Report"
      },
      {
        "Item1": "http://cloud-3.steamusercontent.com/ugc/781859262304598758/2F68ED600FF153C9FFBA88CFF1C80580505203DC/",
        "Item2": "Typhons Children - Act 2 -  Abes Log"
      },
      {
        "Item1": "http://cloud-3.steamusercontent.com/ugc/781859262304600404/124AEB03CEA937246392B68BE1A6E90A0868F784/",
        "Item2": "Typhons Children - Act 2 - VillageRecon"
      },
      {
        "Item1": "http://cloud-3.steamusercontent.com/ugc/781859262304599374/DC5B8D8ABE2462FE22DA1A4B97990B3A37EE1ED1/",
        "Item2": "Typhons Children - Act 2 - After Action Report"
      },
      {
        "Item1": "http://cloud-3.steamusercontent.com/ugc/781859262304603237/0027353CB12E636E719218CBFCEC031AA1E9196F/",
        "Item2": "Typhons Children - Act 3 - Abes Log"
      },
      {
        "Item1": "http://cloud-3.steamusercontent.com/ugc/781859262304605976/81DB3DC21CA3B752B24E27731D201851002ADB7D/",
        "Item2": "Typhons Children - Act 3 - MineAssault"
      },
      {
        "Item1": "http://cloud-3.steamusercontent.com/ugc/781859262304604710/57B595C2CF2B13E49B404748D2D89A46ED518710/",
        "Item2": "Typhons Children - Act 3 - After Action Report"
      },
      {
        "Item1": "http://cloud-3.steamusercontent.com/ugc/781859262304582207/44A479DA3A8D37F3DEE9342E4FB1395350B105D6/",
        "Item2": "A Mothers Love - Mission Briefing"
      },
      {
        "Item1": "http://cloud-3.steamusercontent.com/ugc/781859262301397823/8AFDF3A837114301F1330792C9AFA80CD6EE7E44/",
        "Item2": "A Mothers Love - Act 1 - Abes Log"
      },
      {
        "Item1": "http://cloud-3.steamusercontent.com/ugc/781859262304567652/5BB6B8AE07399C1761C7F9D255B02F2B3BBEC08A/",
        "Item2": "A Mothers Love - Act 1 - Betrayal"
      },
      {
        "Item1": "http://cloud-3.steamusercontent.com/ugc/781859262301400619/1C11D1757B70A0B6273635593A0E8CEAD1C29B6D/",
        "Item2": "A Mothers Love - Act 1 - After Action Report"
      },
      {
        "Item1": "http://cloud-3.steamusercontent.com/ugc/781859262304572613/DB0203511C39AF5DECB282025789B1C6DF401B37/",
        "Item2": "A Mothers Love - Act 2 - Abes Log"
      },
      {
        "Item1": "http://cloud-3.steamusercontent.com/ugc/781859262304574505/45AE8B9626CEC8232AE9FCBC6943EF529B05E320/",
        "Item2": "A Mothers Love - Act 2 - TheNursery"
      },
      {
        "Item1": "http://cloud-3.steamusercontent.com/ugc/781859262304573378/3D5D74834604F2B77237255D92BF489A76C26F8A/",
        "Item2": "A Mothers Love - Act 2 - After Action Report"
      },
      {
        "Item1": "http://cloud-3.steamusercontent.com/ugc/781859262304578756/C00FE19A4A2E8A4ADBE85D46B6051B275A80E901/",
        "Item2": "A Mothers Love - Act 3 - Abes Log"
      },
      {
        "Item1": "http://cloud-3.steamusercontent.com/ugc/781859262301391408/CA1697BC46999F99D8E6507304CB79E4EE753FB8/",
        "Item2": "A Mother's Love - Act 3 - Mother of the Infinite"
      },
      {
        "Item1": "http://cloud-3.steamusercontent.com/ugc/781859262304579208/9BF9B762E7C39B010097732582D6E86D97427942/",
        "Item2": "A Mothers Love - Act 3 - After Action Report"
      },
      {
        "Item1": "http://cloud-3.steamusercontent.com/ugc/781859262304594578/DAAB2024175C609927E619C31C00185409E0A5C6/",
        "Item2": "Follow the Moon - Mission Briefing"
      },
      {
        "Item1": "http://cloud-3.steamusercontent.com/ugc/781859262304582721/8FF7F5EF0BC8A8EB51DBEA5ADEE83513E6EEFE94/",
        "Item2": "Follow the Moon - Act 1 - Abes Log"
      },
      {
        "Item1": "http://cloud-3.steamusercontent.com/ugc/781859262304584279/15B1C0184420B67E8B876BEDA82DB11769378FFD/",
        "Item2": "Follow the Moon - Act 1 - What Lies Beneath"
      },
      {
        "Item1": "http://cloud-3.steamusercontent.com/ugc/781859262304583451/B6ABDAA7DA2190A2B29AF758C1F237C28A19E0AD/",
        "Item2": "Follow the Moon - Act 1 - After Action Report"
      },
      {
        "Item1": "http://cloud-3.steamusercontent.com/ugc/781859262304586962/F4EFB96C532E275A5ABD3326ACBC0F160598CAC5/",
        "Item2": "Follow the Moon - Act 2 - Abes Log"
      },
      {
        "Item1": "http://cloud-3.steamusercontent.com/ugc/781859262304588284/0053B28857E70B90E6E5E5BFCD570A96C8D51E97/",
        "Item2": "Follow the Moon - Act 2 - Gateway"
      },
      {
        "Item1": "http://cloud-3.steamusercontent.com/ugc/781859262304587431/EBF6E9EE36F2D837BCE31865716400CF633D7B15/",
        "Item2": "Follow the Moon - Act 2 - After Action Report"
      },
      {
        "Item1": "http://cloud-3.steamusercontent.com/ugc/781859262304590671/A79755EEFE21C8DAD9986326B780808207D9A011/",
        "Item2": "Follow the Moon - Act 3 - Abes Log"
      },
      {
        "Item1": "http://cloud-3.steamusercontent.com/ugc/781859262304592388/1D2E56553743616DF94E175718926418CC9F25AE/",
        "Item2": "Follow the Moon - Act 3 - Blue Moon"
      },
      {
        "Item1": "http://cloud-3.steamusercontent.com/ugc/781859262304591489/FB85A75E238F4858576D3FBB340C58540B1B4B54/",
        "Item2": "Follow the Moon - Act 3 - After Action Report"
      }
    ]
  },
  "Grid": {
    "Type": 0,
    "Lines": true,
    "Color": {
      "r": 1.0,
      "g": 1.0,
      "b": 1.0
    },
    "Opacity": 0.310345,
    "ThickLines": false,
    "Snapping": false,
    "Offset": false,
    "BothSnapping": false,
    "xSize": 2.26,
    "ySize": 2.68,
    "PosOffset": {
      "x": 0.0,
      "y": 1.0,
      "z": 0.0
    }
  },
  "Lighting": {
    "LightIntensity": 1.85599983,
    "LightColor": {
      "r": 0.25,
      "g": 0.25,
      "b": 0.25
    },
    "AmbientIntensity": 1.472,
    "AmbientType": 0,
    "AmbientSkyColor": {
      "r": 0.5,
      "g": 0.5,
      "b": 0.5
    },
    "AmbientEquatorColor": {
      "r": 0.5,
      "g": 0.5,
      "b": 0.5
    },
    "AmbientGroundColor": {
      "r": 0.5,
      "g": 0.5,
      "b": 0.5
    },
    "ReflectionIntensity": 0.512000144,
    "LutIndex": 25,
    "LutContribution": 0.508000135,
    "LutURL": ""
  },
  "Hands": {
    "Enable": false,
    "DisableUnused": false,
    "Hiding": 0
  },
  "ComponentTags": {
    "labels": [
      {
        "displayed": "Discard_Platform_Small",
        "normalized": "discard_platform_small"
      },
      {
        "displayed": "Discard_Platform_Large",
        "normalized": "discard_platform_large"
      },
      {
        "displayed": "MegaFreeze",
        "normalized": "megafreeze"
      },
      {
        "displayed": "Discard_Bag",
        "normalized": "discard_bag"
      },
      {
        "displayed": "ID_Common.Item",
        "normalized": "id_common.item"
      },
      {
        "displayed": "DiscardMe",
        "normalized": "discardme"
      },
      {
        "displayed": "Draw_Target",
        "normalized": "draw_target"
      },
      {
        "displayed": "ID_Spell",
        "normalized": "id_spell"
      },
      {
        "displayed": "ID_Unique.Item",
        "normalized": "id_unique.item"
      },
      {
        "displayed": "ID_Skill",
        "normalized": "id_skill"
      },
      {
        "displayed": "Discard_Zone",
        "normalized": "discard_zone"
      },
      {
        "displayed": "ID_Ally",
        "normalized": "id_ally"
      },
      {
        "displayed": "ID_Rivertown",
        "normalized": "id_rivertown"
      },
      {
        "displayed": "ID_Skil",
        "normalized": "id_skil"
      },
      {
        "displayed": "ID_Miskatonic.University",
        "normalized": "id_miskatonic.university"
      },
      {
        "displayed": "Discard_CommonItem",
        "normalized": "discard_commonitem"
      },
      {
        "displayed": "Discard_Spell",
        "normalized": "discard_spell"
      },
      {
        "displayed": "Discard_UniqueItem",
        "normalized": "discard_uniqueitem"
      },
      {
        "displayed": "Discard_Skill",
        "normalized": "discard_skill"
      },
      {
        "displayed": "Discard_Ally",
        "normalized": "discard_ally"
      },
      {
        "displayed": "ID_MiskatonicUniversity",
        "normalized": "id_miskatonicuniversity"
      },
      {
        "displayed": "ID_MerchantDistrict",
        "normalized": "id_merchantdistrict"
      },
      {
        "displayed": "ID_FrenchHill",
        "normalized": "id_frenchhill"
      },
      {
        "displayed": "ID_UniqueItem",
        "normalized": "id_uniqueitem"
      },
      {
        "displayed": "ID_CommonItem",
        "normalized": "id_commonitem"
      },
      {
        "displayed": "DeleteMe",
        "normalized": "deleteme"
      },
      {
        "displayed": "Discard_ScriptZone",
        "normalized": "discard_scriptzone"
      },
      {
        "displayed": "SpecialCase",
        "normalized": "specialcase"
      },
      {
        "displayed": "Discard_SpecialCase",
        "normalized": "discard_specialcase"
      },
      {
        "displayed": "ID_OrangeTest",
        "normalized": "id_orangetest"
      },
      {
        "displayed": "ID_BlueTest",
        "normalized": "id_bluetest"
      },
      {
        "displayed": "Discard_Target",
        "normalized": "discard_target"
      },
      {
        "displayed": "Discard_OrangeTest",
        "normalized": "discard_orangetest"
      },
      {
        "displayed": "DiscardMe_Small",
        "normalized": "discardme_small"
      },
      {
        "displayed": "DiscardMe_Large",
        "normalized": "discardme_large"
      },
      {
        "displayed": "DiscardMe_SpecialCase",
        "normalized": "discardme_specialcase"
      },
      {
        "displayed": "DiscardMe_Bag",
        "normalized": "discardme_bag"
      },
      {
        "displayed": "DiscardMe_ScriptZone",
        "normalized": "discardme_scriptzone"
      },
      {
        "displayed": "ID_SZDiscardPink",
        "normalized": "id_szdiscardpink"
      },
      {
        "displayed": "ID_SZDiscardGreen",
        "normalized": "id_szdiscardgreen"
      },
      {
        "displayed": "DiscardTarget",
        "normalized": "discardtarget"
      },
      {
        "displayed": "ID_Easttown",
        "normalized": "id_easttown"
      },
      {
        "displayed": "ID_Uptown",
        "normalized": "id_uptown"
      },
      {
        "displayed": "ID_Mythos",
        "normalized": "id_mythos"
      },
      {
        "displayed": "ID_Otherworld",
        "normalized": "id_otherworld"
      },
      {
        "displayed": "ID_Southside",
        "normalized": "id_southside"
      },
      {
        "displayed": "ID_Northside",
        "normalized": "id_northside"
      },
      {
        "displayed": "ID_Downtown",
        "normalized": "id_downtown"
      },
      {
        "displayed": "ID_Corruption",
        "normalized": "id_corruption"
      },
      {
        "displayed": "ID_Injury",
        "normalized": "id_injury"
      },
      {
        "displayed": "ID_Madness",
        "normalized": "id_madness"
      },
      {
        "displayed": "tmp_1",
        "normalized": "tmp_1"
      },
      {
        "displayed": "tmp2",
        "normalized": "tmp2"
      },
      {
        "displayed": "tmp3",
        "normalized": "tmp3"
      },
      {
        "displayed": "DiscardMe_Zone",
        "normalized": "discardme_zone"
      },
      {
        "displayed": "ID_TempTest",
        "normalized": "id_temptest"
      },
      {
        "displayed": "DiscardObject",
        "normalized": "discardobject"
      },
      {
        "displayed": "DiscardObject_SpecialCase",
        "normalized": "discardobject_specialcase"
      },
      {
        "displayed": "ID_Relationship",
        "normalized": "id_relationship"
      },
      {
        "displayed": "ID_DeputyOA",
        "normalized": "id_deputyoa"
      },
      {
        "displayed": "ID_MemberSheldon",
        "normalized": "id_membersheldon"
      },
      {
        "displayed": "ID_Condition",
        "normalized": "id_condition"
      },
      {
        "displayed": "ID_BlessCurse",
        "normalized": "id_blesscurse"
      },
      {
        "displayed": "Retainer(DiscardID)",
        "normalized": "retainer(discardid)"
      },
      {
        "displayed": "ID_Retainer",
        "normalized": "id_retainer"
      },
      {
        "displayed": "Retainer-DiscardID",
        "normalized": "retainer-discardid"
      },
      {
        "displayed": "ID_3rdEye",
        "normalized": "id_3rdeye"
      },
      {
        "displayed": "ID_MemberSilver",
        "normalized": "id_membersilver"
      },
      {
        "displayed": "ID_BankLoan",
        "normalized": "id_bankloan"
      },
      {
        "displayed": "ID_InnerBeast",
        "normalized": "id_innerbeast"
      },
      {
        "displayed": "ID_AzureFlame",
        "normalized": "id_azureflame"
      },
      {
        "displayed": "ID_Member1000Cult",
        "normalized": "id_member1000cult"
      },
      {
        "displayed": "ID_StoryTask",
        "normalized": "id_storytask"
      },
      {
        "displayed": "ID_StoryConclusion",
        "normalized": "id_storyconclusion"
      },
      {
        "displayed": "ID_Detriment",
        "normalized": "id_detriment"
      },
      {
        "displayed": "ID_Benefit",
        "normalized": "id_benefit"
      },
      {
        "displayed": "Tome",
        "normalized": "tome"
      },
      {
        "displayed": "Weapon",
        "normalized": "weapon"
      },
      {
        "displayed": "PhysicalWeapon",
        "normalized": "physicalweapon"
      },
      {
        "displayed": "MagicalWeapon",
        "normalized": "magicalweapon"
      },
      {
        "displayed": "ElderSign",
        "normalized": "eldersign"
      },
      {
        "displayed": "ID_GOO",
        "normalized": "id_goo"
      },
      {
        "displayed": "Gaurdian",
        "normalized": "gaurdian"
      },
      {
        "displayed": "ID_Herald",
        "normalized": "id_herald"
      },
      {
        "displayed": "ID_Gaurdian",
        "normalized": "id_gaurdian"
      },
      {
        "displayed": "ID_Institution",
        "normalized": "id_institution"
      },
      {
        "displayed": "Delete",
        "normalized": "delete"
      },
      {
        "displayed": "Task",
        "normalized": "task"
      },
      {
        "displayed": "ID_CommonItems",
        "normalized": "id_commonitems"
      },
      {
        "displayed": "Mission",
        "normalized": "mission"
      },
      {
        "displayed": "TagNameHere",
        "normalized": "tagnamehere"
      },
      {
        "displayed": "PoolTable",
        "normalized": "pooltable"
      },
      {
        "displayed": "ShuffleBag",
        "normalized": "shufflebag"
      },
      {
        "displayed": "PoolBoard",
        "normalized": "poolboard"
      },
      {
        "displayed": "DrawSource",
        "normalized": "drawsource"
      },
      {
        "displayed": "Pool_Board",
        "normalized": "pool_board"
      },
      {
        "displayed": "Pool_Table",
        "normalized": "pool_table"
      },
      {
        "displayed": "Pool_Trash",
        "normalized": "pool_trash"
      },
      {
        "displayed": "ID_Gate",
        "normalized": "id_gate"
      },
      {
        "displayed": "Pool_Button",
        "normalized": "pool_button"
      },
      {
        "displayed": "Pool_Label",
        "normalized": "pool_label"
      },
      {
        "displayed": "ScaleBag",
        "normalized": "scalebag"
      },
      {
        "displayed": "DrawTarget",
        "normalized": "drawtarget"
      },
      {
        "displayed": "ID_CorruptionRED",
        "normalized": "id_corruptionred"
      },
      {
        "displayed": "ID_CorruptionGREEN",
        "normalized": "id_corruptiongreen"
      },
      {
        "displayed": "Rumor",
        "normalized": "rumor"
      },
      {
        "displayed": "Headline",
        "normalized": "headline"
      },
      {
        "displayed": "Urban",
        "normalized": "urban"
      },
      {
        "displayed": "Weather",
        "normalized": "weather"
      },
      {
        "displayed": "Mystic",
        "normalized": "mystic"
      },
      {
        "displayed": "Reset",
        "normalized": "reset"
      },
      {
        "displayed": "Red",
        "normalized": "red"
      },
      {
        "displayed": "Green",
        "normalized": "green"
      },
      {
        "displayed": "Blue",
        "normalized": "blue"
      },
      {
        "displayed": "Yellow",
        "normalized": "yellow"
      },
      {
        "displayed": "ggggg",
        "normalized": "ggggg"
      },
      {
        "displayed": "TEST",
        "normalized": "test"
      },
      {
        "displayed": "ID_Monster",
        "normalized": "id_monster"
      },
      {
        "displayed": "ShuffleBagRestricted",
        "normalized": "shufflebagrestricted"
      },
      {
        "displayed": "ShuffleBagExit",
        "normalized": "shufflebagexit"
      },
      {
        "displayed": "TrashCan",
        "normalized": "trashcan"
      },
      {
        "displayed": "Physical",
        "normalized": "physical"
      },
      {
        "displayed": "Magical",
        "normalized": "magical"
      },
      {
        "displayed": "Spell",
        "normalized": "spell"
      },
      {
        "displayed": "SetUp_Zone",
        "normalized": "setup_zone"
      },
      {
        "displayed": "Scene_Set",
        "normalized": "scene_set"
      },
      {
        "displayed": "RoomFloor",
        "normalized": "roomfloor"
      }
    ]
  },
  "Turns": {
    "Enable": false,
    "Type": 0,
    "TurnOrder": [],
    "Reverse": false,
    "SkipEmpty": false,
    "DisableInteractions": false,
    "PassTurns": true,
    "TurnColor": ""
  },
  "CameraStates": [
    {
      "Position": {
        "x": -6.177839,
        "y": -2.5,
        "z": 3.73500443
      },
      "Rotation": {
        "x": 65.00002,
        "y": 0.130555913,
        "z": 0.0
      },
      "Distance": 171.60759,
      "Zoomed": false,
      "AbsolutePosition": {
        "x": -6.343096,
        "y": 153.029312,
        "z": -68.78926
      }
    },
    {
      "Position": {
        "x": 117.442795,
        "y": -2.5,
        "z": 142.439651
      },
      "Rotation": {
        "x": 65.0,
        "y": 1.00179141E-05,
        "z": 0.0
      },
      "Distance": 55.7122,
      "Zoomed": false,
      "AbsolutePosition": {
        "x": 117.44278,
        "y": 47.9924049,
        "z": 118.894676
      }
    },
    {
      "Position": {
        "x": 12.8600206,
        "y": -95.20935,
        "z": -56.479557
      },
      "Rotation": {
        "x": 47.17384,
        "y": 180.072037,
        "z": 0.0
      },
      "Distance": 120.136658,
      "Zoomed": false,
      "AbsolutePosition": {
        "x": 12.9626961,
        "y": -8.919951,
        "z": 25.18644
      }
    },
    {
      "Position": {
        "x": -5.568759,
        "y": -2.5,
        "z": 5.305865
      },
      "Rotation": {
        "x": 64.99998,
        "y": -8.723329E-08,
        "z": 0.0
      },
      "Distance": 51.434124,
      "Zoomed": false,
      "AbsolutePosition": {
        "x": -5.56875944,
        "y": 44.11513,
        "z": -16.43116
      }
    },
    {
      "Position": {
        "x": 30.839613,
        "y": -95.20935,
        "z": -83.40706
      },
      "Rotation": {
        "x": 47.17384,
        "y": 180.072067,
        "z": 0.0
      },
      "Distance": 120.136658,
      "Zoomed": false,
      "AbsolutePosition": {
        "x": 30.9423351,
        "y": -8.919951,
        "z": -1.74105072
      }
    },
    null,
    null,
    null,
    null,
    {
      "Position": {
        "x": -2.05994024E-06,
        "y": -2.5,
        "z": 13.5099812
      },
      "Rotation": {
        "x": 64.99999,
        "y": 4.46236045E-05,
        "z": 0.0
      },
      "Distance": 127.186,
      "Zoomed": false,
      "AbsolutePosition": {
        "x": -4.39228752E-05,
        "y": 112.769653,
        "z": -40.24115
      }
    }
  ],
  "DecalPallet": [],
  "LuaScript": "-- Bundled by luabundle {\"version\":\"1.6.0\"}\nlocal __bundle_require, __bundle_loaded, __bundle_register, __bundle_modules = (function(superRequire)\n\tlocal loadingPlaceholder = {[{}] = true}\n\n\tlocal register\n\tlocal modules = {}\n\n\tlocal require\n\tlocal loaded = {}\n\n\tregister = function(name, body)\n\t\tif not modules[name] then\n\t\t\tmodules[name] = body\n\t\tend\n\tend\n\n\trequire = function(name)\n\t\tlocal loadedModule = loaded[name]\n\n\t\tif loadedModule then\n\t\t\tif loadedModule == loadingPlaceholder then\n\t\t\t\treturn nil\n\t\t\tend\n\t\telse\n\t\t\tif not modules[name] then\n\t\t\t\tif not superRequire then\n\t\t\t\t\tlocal identifier = type(name) == 'string' and '\\\"' .. name .. '\\\"' or tostring(name)\n\t\t\t\t\terror('Tried to require ' .. identifier .. ', but no such module has been registered')\n\t\t\t\telse\n\t\t\t\t\treturn superRequire(name)\n\t\t\t\tend\n\t\t\tend\n\n\t\t\tloaded[name] = loadingPlaceholder\n\t\t\tloadedModule = modules[name](require, loaded, register, modules)\n\t\t\tloaded[name] = loadedModule\n\t\tend\n\n\t\treturn loadedModule\n\tend\n\n\treturn require, loaded, register, modules\nend)(nil)\n__bundle_register(\"__root\", function(require, _LOADED, __bundle_register, __bundle_modules)\nlocal debug = require(\"/_libs/debug/debug\")\nlocal onModLoad=require(\"/_libs/onModLoad/onModLoad\")\n\nfunction onLoad()\n    debug.setDebugHotKeys()\n\n    setGlobalVariables()\n    onModLoad.MegaFreeze() -- You can also add GUIDs via {'guid1', 'guid2'....}\n    onModLoad.FixHandZones(10)\n\n    local GlobalEvents=require(\"/ArkhamHorror/GlobalEvents\")\nend\n\nfunction setGlobalVariables()\n    GlobalVariables=require(\"/ArkhamHorror/GlobalVariables\")\nend\n\nfunction onUpdate()end\nend)\n__bundle_register(\"/ArkhamHorror/GlobalVariables\", function(require, _LOADED, __bundle_register, __bundle_modules)\nlocal GlobalVariables = {}\r\n\r\nGlobalVariables.BagStackBaseScale = {}\r\nGlobalVariables.DefaultBagStackBaseScale = 1.55\r\nGlobalVariables.BagStackBaseScale['Gate Pile'] = 1.55 --GlobalVariables.DefaultBagStackBaseScale\r\nGlobalVariables.BagStackBaseScale['Gate Discard Pile'] = 1.55 --GlobalVariables.DefaultBagStackBaseScale\r\n\r\n\r\n\r\nreturn GlobalVariables\r\n\nend)\n__bundle_register(\"/ArkhamHorror/GlobalEvents\", function(require, _LOADED, __bundle_register, __bundle_modules)\nlocal tool = {}\r\n      tool.waitForLastDropIntoBox=require(\"/_libs/WaitUtils/waitUtils\").dropIntoBox\r\n      tool.shuffleBag=require(\"/_libs/shuffleUtils/shuffleContainer\").container\r\n      tool.scaleBag=require(\"/_libs/scaleBags/scaleBags\").fromContents\r\n      tool.processTrash=require(\"/_libs/trashCan/trashCan\").process\r\n\r\nlocal dropTimer = 0.8\r\n\r\nlocal GlobalEvents = {}\r\n--------------------------------------------------------------------------------\r\n--- onObjectEnter : CONTAINER --------------------------------------------------\r\nfunction onObjectEnterContainer(bag, obj)\r\n    -- Run Trash code, skip everythign else.\r\n    if bag.hasTag('TrashCan') then\r\n        tool.waitForLastDropIntoBox(bag, obj, tool.processTrash, dropTimer)\r\n    else -- Run onObjectEnterExitContainer_Stack()... every Enter Event in this will be test for and run\r\n        tool.waitForLastDropIntoBox(bag, obj, onObjectEnterExitContainer_Stack, dropTimer)\r\n    end\r\nend\r\n--------------------------------------------------------------------------------\r\n--- onObjectEnterExitContainer_Stack : CONTAINER -------------------------------\r\n-- This will run a bunch of event tests after a SINLGE Droptest.\r\nfunction onObjectEnterExitContainer_Stack(bag, obj)\r\n    if bag.hasTag('ScaleBag') then\r\n        tool.scaleBag(bag)\r\n    end\r\n\r\n    if bag.hasTag('ShuffleBag') or bag.hasTag('ShuffleBagRestricted') then\r\n        tool.shuffleBag(bag)\r\n    end\r\nend\r\n--******************************************************************************\r\n--------------------------------------------------------------------------------\r\n--- onObjectLeave : CONTAINER --------------------------------------------------\r\nfunction onObjectLeaveContainer(bag, obj)\r\n    tool.waitForLastDropIntoBox(bag, obj, onObjectEnterExitContainer_Stack, dropTimer)\r\nend\r\n--------------------------------------------------------------------------------\r\n--------------------------------------------------------------------------------\r\nreturn GlobalEvents\r\n\nend)\n__bundle_register(\"/_libs/trashCan/trashCan\", function(require, _LOADED, __bundle_register, __bundle_modules)\nlocal trashCan = {}\r\nlocal debug = require(\"/_libs/debug/debug\")\r\n\r\nlocal tool = require(\"/_libs/takeObjectUtils/takeObjectUtils\")\r\n      tool.cast = require(\"/_libs/trashCan/trashCast\")\r\n      tool.findTag = require(\"/_libs/tagUtils/tagUtils\").findTagString\r\n      tool.specialCase = require(\"/ArkhamHorror/TrashSpecialCase\")\r\n\r\nlocal KIND = {Delete='Delete', SmallCard='Small', LargeCard='Large', Bag='Bag', ScriptZone='Zone', SpecialCase='SpecialCase', Deck='Deck'}\r\n\r\n--------------------------------------------------------------------------------\r\n--- Function to Call with EVENT ------------------------------------------------\r\nfunction trashCan.process(bag)\r\n  runTrash(bag)\r\nend\r\n--------------------------------------------------------------------------------\r\n--- remove any decks from the trash and move to processing ---------------------\r\nfunction runTrash(TrashBag)\r\n    --printToAll('Trash 01 : runTrash!')\r\n    local removedDeckList = removeDecksFormTrash(TrashBag, TrashBag.getData().ContainedObjects)\r\n    Wait.frames(function() processBag(TrashBag, removedDeckList) end, 5) -- Wait a bit to ensure decks have spawned after being taken out of bag.\r\nend\r\n--------------------------------------------------------------------------------\r\n--- runTrash -------------------------------------------------------------------\r\nfunction processBag(TrashBag, removedDeckList)\r\n    --print('Trash 02 : processBag!')\r\n    local uniqueCast = UniqueCastLocations(TrashBag, removedDeckList)\r\n    ProcessKind(TrashBag, uniqueCast, removedDeckList)\r\nend\r\n--------------------------------------------------------------------------------\r\n--- runTrash -------------------------------------------------------------------\r\nfunction ProcessKind(TrashBag, uniqueCast, removedDeckList)\r\n    --print('Move : ProcessKind')\r\n -- Process the remaining contents of TrashBag (remeber all decks have been removed)\r\n    local TrashContents = TrashBag.getObjects()\r\n    local idex = tool.reverseIndex(TrashContents)\r\n    for k,dex in ipairs(idex) do\r\n        local obj = TrashContents[dex+1]\r\n        if obj.tags[1] then\r\n            local id = setIDs(obj.tags)\r\n            --zprint(id,'ID++++')\r\n            --print('??')\r\n            if id.discard then\r\n                if id.kind == KIND.SpecialCase then\r\n                    print('Special Case - OBJ')\r\n                    moveSpecialCase(TrashBag.takeObject({index = dex}), TrashBag)\r\n                else\r\n                    for q,w in pairs(uniqueCast) do\r\n                        if q == id.id then\r\n                            moveObject(TrashBag.takeObject({index = dex}), TrashBag, uniqueCast[id.id], id)\r\n                            break\r\n                        end\r\n                    end\r\n                end\r\n            else\r\n                if id.delete then\r\n                    destroyObject(TrashBag.takeObject({index = dex}))\r\n                end\r\n            end\r\n        end\r\n    end\r\n -- Process remaing removed Decks\r\n    for _, deck in ipairs(removedDeckList) do\r\n        TrashContents = deck.getObjects()\r\n        idex = tool.reverseIndex(TrashContents)\r\n        for k,dex in ipairs(idex) do\r\n            local obj = TrashContents[dex+1]\r\n            if obj.tags[1] then\r\n                local id = setIDs(obj.tags)\r\n                if id.discard then\r\n                    if id.kind == KIND.SpecialCase then\r\n                    print('Special Case - DECK')\r\n                        moveSpecialCase(TrashBag.takeObject({index = dex}), TrashBag)\r\n                    else\r\n                        for q,w in pairs(uniqueCast) do\r\n                            if q == id.id then\r\n                                moveObject(deck.takeObject({index = dex}), TrashBag, uniqueCast[id.id], id)\r\n                                break\r\n                            end\r\n                        end\r\n                    end\r\n                else\r\n                    if id.delete then\r\n                        destroyObject(TrashBag.takeObject({index = dex}))\r\n                    end\r\n                end\r\n            end\r\n        end\r\n    end\r\n\r\nend\r\n--------------------------------------------------------------------------------\r\n--- moveSpecialCase ------------------------------------------------------------\r\n-- This calls the \"specialCase\" code.\r\nfunction moveSpecialCase(obj, TrashBag)\r\n    tool.specialCase.Process(obj,TrashBag)\r\nend\r\n--******************************************************************************\r\n--- moveObject -----------------------------------------------------------------\r\n--******************************************************************************\r\n-- This gose through list and moves all items into postion. Then once moved calls a \"add to deck\" function to snap them into place with putObject() rather than just fall via physisc\r\nfunction moveObject(obj, TrashBag, uniqueCastID, id)\r\n    --print('?? - moveObject')\r\n    --zprint(uniqueCastID,'uniqueCastID')\r\n    --if uniqueCastID.targetSource.type == 'Scripting' then\r\n        --If I ever need more advanced control when sending to script zones.. I can put stuff in here and move the rest of ths block into ELSE\r\n    --end\r\n    Wait.frames(function()\r\n        obj.setPosition(tool.placeTopOrBot_ofObject(TrashBag,'top')+Vector(0,0.2,0))\r\n        obj.setPositionSmooth(tool.placeTopOrBot_ofObject(uniqueCastID.targetSource,'top')+Vector(0,uniqueCastID.Y,0)) --uniqueCastID.targetSource.getPosition()\r\n        uniqueCastID.Y = uniqueCastID.Y + getSizeofObj(obj).y+0.2\r\n        Wait.condition(function() uniqueCastID.targetObj = Wait_AddCardtoDeck(obj, uniqueCastID) end, function() return not obj.isSmoothMoving() end)\r\n    end,1)\r\nend\r\n\r\nfunction getSizeofObj(obj)\r\n    local size = obj.getBoundsNormalized().size\r\n    return size\r\nend\r\n\r\nfunction Wait_AddCardtoDeck(obj, uniqueCastID)--(card, discardZonePos, targetObj)\r\n    local discardPile = uniqueCastID.targetObj\r\n    if discardPile then\r\n        discardPile = discardPile.putObject(obj)\r\n    else\r\n        obj.setPosition(tool.placeTopOrBot_ofObject(uniqueCastID.targetSource,'top'))--+Vector(0,0.05,0))\r\n        discardPile = obj\r\n    end\r\n    -- If the discard obejct is a DECK pile.. make sure it is named. This will use the ID_?? As the base for the DiscardPile Name\r\n    if discardPile.type == 'Deck' then\r\n        if discardPile.getName() == '' then\r\n            discardPile.setName(nameDiscardPile(discardPile))\r\n        end\r\n    end\r\n    return discardPile\r\nend\r\n\r\nfunction nameDiscardPile(discardPile)\r\n    local ID = tool.findTag(discardPile.getTags(),'ID_'):gsub(\"ID_\", \"\")\r\n    local nameTable = {}\r\n    ID:gsub(\"[A-Z][a-z]*\", function(word) table.insert(nameTable, word) end) -- Split Cammel Case into a Table\r\n    local name = ''\r\n    if #nameTable > 1 then\r\n        name = table.concat(nameTable, \" \")\r\n    else\r\n        name = nameTable[1]\r\n    end\r\n    return 'Discarded '..name..'s'\r\nend\r\n--------------------------------------------------------------------------------\r\n--- setIDs ---------------------------------------------------------------------\r\n-- Go through an obj's tag list and find spesific tags related to the trash functions and add them to a data variable for use latter.\r\nfunction setIDs(tagList)\r\n    --print('setIDs')\r\n    local id = {}\r\n    for k,tag in pairs(tagList) do\r\n        if string.find(tag, 'DiscardObject', 1, true) then\r\n            if string.find(tag, 'SpecialCase', 1, true) then\r\n                id.kind = 'SpecialCase'\r\n            else\r\n                id.kind = 'DiscardObject'\r\n            end\r\n            id.discard = true\r\n        elseif string.find(tag, 'DeleteMe', 1, true) then\r\n            id.delete = true\r\n        elseif string.find(tag, 'ID_', 1, true) then\r\n            id.id = tag\r\n        end\r\n    end\r\n    --debug.zp(id)\r\n    return id\r\nend\r\n\r\n--------------------------------------------------------------------------------\r\n--- UniqueCastLocations(TrashBag, removedDeckList) -----------------------------\r\n--- Build a list from trash and find the unique locations for each discard, then cast at that location and return found data.\r\n--- Loop though trash objects and find the \"DiscardMe_\" Tag.. and then extract the \"kind\" of discard type as well as the unique Identifyer (ID) of the discard\r\nfunction UniqueCastLocations(TrashBag, removedDeckList)\r\n    local z = {}\r\n        for k,obj in ipairs(TrashBag.getObjects()) do\r\n            if obj.tags[1] then\r\n                local id = setIDs(obj.tags)\r\n                --debug.zp(id,'OBJ TEST')\r\n                if id.discard then\r\n                    if id.kind ~= KIND.SpecialCase then\r\n                        z[id.id] = id.kind\r\n                    end\r\n                end\r\n            end\r\n        end\r\n\r\n        for _, deck in ipairs (removedDeckList) do\r\n            for _, card in ipairs(deck.getObjects()) do\r\n                if card.tags[1] then\r\n                    local id = setIDs(card.tags)\r\n                    --zprint(id,'TEST IN DECK')\r\n                    if id.discard then\r\n                        if id.kind ~= KIND.SpecialCase then\r\n                            z[id.id] = id.kind\r\n                        end\r\n                    end\r\n                end\r\n            end\r\n        end\r\n        --debug.zp(z,'z >>>')\r\n        z = tool.cast.findContainer(z)\r\n    return z\r\nend\r\n\r\n--------------------------------------------------------------------------------\r\n--- removeDecksFormTrash(TrashBag) ---------------------------------------------\r\nfunction removeDecksFormTrash(TrashBag, TrashBag_ContentData)\r\n    local z = {}\r\n        local indexesToRemove = tool.reverseIndexbyTag(TrashBag_ContentData, {tags={'DiscardObject'}, search=false}, {Name='Deck'})\r\n        --debug.zp(indexesToRemove,'indexesToRemove')\r\n        for i,indexToRemove in ipairs (indexesToRemove) do\r\n            local o = TrashBag.takeObject({ index = indexToRemove })\r\n            o.setPosition(tool.placeTopOrBot_ofObject(TrashBag,'top')+Vector(0,0,-8)) ------------ debug VERSION OF MOVE\r\n            --o.setPosition(tool.placeTopOrBot_ofObject(TrashBag,'top')+Vector(0,-70,0))\r\n            o.setRotation(Vector(0,180,0))\r\n            o.setLock(true)\r\n            table.insert(z, o)\r\n        end\r\n    if z[1] then return z else return {} end\r\nend\r\n--------------------------------------------------------------------------------\r\n--------------------------------------------------------------------------------\r\nreturn trashCan\r\n\nend)\n__bundle_register(\"/ArkhamHorror/TrashSpecialCase\", function(require, _LOADED, __bundle_register, __bundle_modules)\nlocal trashSpecialCase = {}\r\n\r\nfunction trashSpecialCase.Process(obj,TrashBag)\r\n    print('WE ARE INSIDE THE SPECIAL CASE CODE... NOTHING HERE YET!!')\r\nend\r\n\r\nreturn trashSpecialCase\r\n\r\n--[[\r\nlocal tool      = require(\"/ArkhamHorror/Scripts/TrashCan/TrashTools\")\r\nlocal resetY = 3\r\nlocal Cases = {}\r\n      Cases['NameTest'] = {Y=resetY}\r\n      Cases['DescTest'] = {Y=resetY}\r\n      Cases['GMTest']   = {Y=resetY}\r\n--------------------------------------------------------------------------------\r\nfunction TrashSpecialCase.Process(obj,TrashBag)\r\n    for key, v in pairs(Cases) do\r\n        if key == obj.getName() or key == obj.getDescription() or key == obj.getGMNotes() then\r\n            Cases[key].Process(obj,TrashBag,key)\r\n        end\r\n    end\r\n    for key, v in pairs(Cases) do\r\n        if key == obj.getName() or key == obj.getDescription() or key == obj.getGMNotes() then\r\n            Cases[key].Y = resetY\r\n        end\r\n    end\r\nend\r\n\r\nfunction getSizeofObj(obj)\r\n    local size = obj.getBoundsNormalized().size\r\n    return size\r\nend\r\n--******************************************************************************\r\n-- UNIQUE SPECALA CASE FUNCTIONS START HERE! ***********************************\r\n--******************************************************************************\r\nfunction Cases.NameTest.Process(obj,TrashBag,key)\r\n    local pos = Vector(-53.54, 1.42, 28.22)\r\n    local rot = Vector(0,0,180)\r\n    Wait.frames(function()\r\n        obj.setPosition(tool.placeTopOrBot_ofObject(TrashBag,'top')+Vector(0,0.2,0))\r\n        obj.setPositionSmooth(pos+Vector(0,Cases[key].Y,0))\r\n        obj.setRotationSmooth(rot)\r\n        Cases[key].Y = Cases[key].Y + getSizeofObj(obj).y + 0.2\r\n    end,1)\r\n    --uniqueCastID.Y = uniqueCastID.Y + getSizeofObj(obj).y+0.2\r\nend\r\n\r\nfunction Cases.DescTest.Process(obj,TrashBag,key)\r\n    local pos = Vector(-50.30, 0.82, 28.35)\r\n    local rot = Vector(0,90,0)\r\n    Wait.frames(function()\r\n        obj.setPosition(tool.placeTopOrBot_ofObject(TrashBag,'top')+Vector(0,0.2,0))\r\n        obj.setPositionSmooth(pos+Vector(0,Cases[key].Y,0))\r\n        obj.setRotationSmooth(rot)\r\n        Cases[key].Y = Cases[key].Y + getSizeofObj(obj).y + 0.2\r\n    end,1)\r\nend\r\n\r\nfunction Cases.GMTest.Process(obj,TrashBag,key)\r\n    local pos = Vector(-46.53, 1.68, 28.36)\r\n    local rot = Vector(0,180,180)\r\n    local scale = Vector(1.58, 4.30, 1.58)\r\n    Wait.frames(function()\r\n        obj.setPosition(tool.placeTopOrBot_ofObject(TrashBag,'top')+Vector(0,0.2,0))\r\n        obj.setPositionSmooth(pos+Vector(0,Cases[key].Y,0))\r\n        obj.setRotationSmooth(rot)\r\n        obj.setScale(scale)\r\n        Cases[key].Y = Cases[key].Y + getSizeofObj(obj).y + 0.2\r\n    end,1)\r\nend\r\n\r\nreturn TrashSpecialCase\r\n]]\r\n\nend)\n__bundle_register(\"/_libs/tagUtils/tagUtils\", function(require, _LOADED, __bundle_register, __bundle_modules)\nlocal tagUtils = {}\r\n--------------------------------------------------------------------------------\r\nfunction tagUtils.findTagString(tagTable, str)\r\n    for k, line in pairs(tagTable) do\r\n        if string.find(string.lower(line), string.lower(str), 1, true) then\r\n            return line\r\n        end\r\n    end\r\nend\r\n--- TagFound --- ---------------------------------------------------------------\r\n--- search a tag list for another tag. useFind is a bool. flase / mission  will look for exact match. true will use string.find()\r\nfunction tagUtils.tagFound(tags, keys, useFind) -- useFind BOOL : use == or use string.find()\r\n    if useFind then\r\n        for _, tag in pairs(tags) do\r\n            for _, key in pairs(keys) do\r\n                if string.find(string.lower(tag), string.lower(key), 1, true) then\r\n                    return true\r\n                end\r\n            end\r\n        end\r\n    else\r\n        for _, tag in pairs(tags) do\r\n            for _   , key in pairs(keys) do\r\n                if string.lower(tag) == string.lower(key) then\r\n                    return true\r\n                end\r\n            end\r\n        end\r\n    end\r\n    return false\r\nend\r\n--------------------------------------------------------------------------------\r\n--- TagFound --- ---------------------------------------------------------------\r\n--- allObjectInBagHaveTagThatMatchesBag ----------------------------------------\r\n-- Seach all objects in a container and is any object in container has no tags in common with bag then report\r\nfunction tagUtils.allObjectInBagHaveTagThatMatchesBag(bag,key)\r\n    --print('    : In Tag Find Code\\n')\r\n    local data = { objsNotMissingTag = true, tag = nil }--, badObj = nil }\r\n\r\n    -- Find Tag with Matching KEY on the bag itself\r\n    for k,line in pairs(bag.getTags()) do\r\n        if string.find(string.lower(line), string.lower(key), 1, true) then\r\n            data.tag = line\r\n            break\r\n        else\r\n            data.tag = false\r\n        end\r\n    end\r\n\r\n    -- Find if the Tag found on bag is on ALL the objects in bag.\r\n    if data.tag then -- This is actually testing if FLASE... so if FALSE (as in key not found) do not do below\r\n        --print('Inside For Loop')\r\n        local contents = bag.getObjects()\r\n        for k,o in pairs(contents) do\r\n            contents[k] = false\r\n            for _,t in pairs(o.tags) do\r\n                if t == data.tag then\r\n                    --print('FOUND == t : '..t..' : bagTag : '..data.tag)\r\n                    --data.badObj = false\r\n                    contents[k] = true\r\n                    break\r\n                end\r\n            end\r\n        end\r\n\r\n        -- check that all object vales resolve as true, if any resolve as false we know an object is missing the correct tag\r\n        for k,v in pairs (contents) do\r\n            --print('Loop 2')\r\n            if not v then\r\n                data.objsNotMissingTag = false\r\n                break\r\n            end\r\n        end\r\n\r\n    end\r\n\r\n    return data\r\nend\r\n--------------------------------------------------------------------------------\r\n--------------------------------------------------------------------------------\r\nreturn tagUtils\r\n\nend)\n__bundle_register(\"/_libs/trashCan/trashCast\", function(require, _LOADED, __bundle_register, __bundle_modules)\nlocal TrashCast = {}\r\n--------------------------------------------------------------------------------\r\n-- Global Variabels\r\nlocal ShowCast = true -- cast debug visial\r\nlocal debug = require(\"/_libs/debug/debug\")\r\nlocal DiscardPlatforms = nil\r\nlocal YOffset = 1\r\n\r\n--------------------------------------------------------------------------------\r\n--- Main Function to Call ------------------------------------------------------\r\nfunction TrashCast.findContainer(data)\r\n    --print('+++ Inside Cast +++')\r\n    return CastByString(data)\r\nend\r\n--------------------------------------------------------------------------------\r\n--- Cast Code ------------------------------------------------------------------\r\nfunction CastByString(TrashIDList)\r\n    for id,kind in pairs(TrashIDList) do\r\n        local target = getObjectsWithAllTags({'DiscardTarget', id}) -- getObjectsWithAllTags() is an official TTS function, not yet added to API page\r\n        if target[1] then target=target[1] end\r\n        TrashIDList[id] = cast(target,id, kind)\r\n    end\r\n    return TrashIDList\r\nend\r\n\r\nfunction cast(target, id, kind)\r\n    local platform = {size=Vector(2,2,2), posOffset=Vector(0, 0, 0)}\r\n    local size = Vector(0,0,0)\r\n        if target.type == 'Scripting' then\r\n            size = target.getScale()\r\n        else\r\n            size = platform.size\r\n        end\r\n\r\n    local zone = Physics.cast({ origin=target.getPosition() + platform.posOffset,\r\n                                direction={0,1,0},\r\n                                type=3,\r\n                                max_distance=0,\r\n                                size=size,\r\n                                debug=ShowCast})\r\n    return ProcessCast(target, zone, id, kind)\r\nend\r\n\r\nfunction ProcessCast(target, zone, id, kind)\r\n    local z = {}\r\n    local noCDB = true -- no card, deck or bag at cast location\r\n        if not zone[1] then\r\n            z.targetObj = target\r\n            z.targetSource = target\r\n        else\r\n            for k,found in pairs(zone) do\r\n                local obj = found.hit_object\r\n                if (obj.type == 'Card' or obj.type == 'Deck' or obj.type == 'Bag') then\r\n                    z.targetObj = obj\r\n                    noCDB = false\r\n                end\r\n                if obj == target then\r\n                    z.targetSource = obj\r\n                end\r\n                if target.type == \"Scripting\" then\r\n                    z.targetSource = target\r\n                end\r\n            end\r\n        end\r\n        z.Y=YOffset -- Global Value at top of script.\r\n        z.id=id\r\n        z.kind=kind\r\n    return z\r\nend\r\n\r\nreturn TrashCast\r\n\nend)\n__bundle_register(\"/_libs/debug/debug\", function(require, _LOADED, __bundle_register, __bundle_modules)\nlocal debug = {}\r\n\r\nlocal hexC = {}\r\n        hexC.Yellow = '['..Color.fromString(\"Yellow\"):toHex()..']'\r\n        hexC.Orange = '['..Color.fromString(\"Orange\"):toHex()..']'\r\n        hexC.Red = '['..Color.fromString(\"Red\"):toHex()..']'\r\n        hexC.White = '['..Color.fromString(\"White\"):toHex()..']'\r\n        hexC.close = '[-]'\r\n\r\nfunction debug.setDebugHotKeys()\r\n    addHotkey(\"dBug_PrintTags\",hot_PrintTags , false)\r\nend\r\n\r\nfunction hot_PrintTags(playerColor, object, pointerPosition, isKeyUp)\r\n    if object then\r\n        local objString = tostring(object)\r\n        local nameString = object.getName()\r\n        print('\\n'..objString)\r\n        if nameString == '' then\r\n            print(logString(object.getTags(), ' Tags : <No Name>'))\r\n        else\r\n            print(logString(object.getTags(), ' Tags : '..nameString))\r\n        end\r\n    end\r\nend\r\n\r\nfunction debug.zp(var,title)\r\n    if var == nil then\r\n        printToAll(hexC.Red..'Error :'..hexC.Yellow..' Variable being sent in NIL')\r\n    else\r\n        --print(type(var))\r\n        if (type(var) == \"table\") then\r\n            if title then\r\n                print(logString(var,'\\n-- '..title..' --'))\r\n            else\r\n                print(logString(var))\r\n            end\r\n        else\r\n            if title then print('-- '..title..' --') end\r\n            print(var)\r\n        end\r\n    end\r\nend\r\n\r\nfunction debug.zpd(table,key,title)\r\n    if title then\r\n        print('\\n-- '..title..' --')\r\n    end\r\n    for _, tbl in pairs(table) do\r\n        for k,v in pairs(tbl) do\r\n            if k == key then\r\n                print('  '..tostring(k)..' : '..v)\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\nreturn debug\r\n\nend)\n__bundle_register(\"/_libs/takeObjectUtils/takeObjectUtils\", function(require, _LOADED, __bundle_register, __bundle_modules)\nlocal takeObjectUtils = {}\r\nlocal tool = {}\r\n      tool.tags = require(\"/_libs/tagUtils/tagUtils\")\r\n\r\n--------------------------------------------------------------------------------\r\n--- reverseIndex  --------------------------------------------------------------\r\n--- create a reverse index for ALL objects in a container\r\nfunction takeObjectUtils.reverseIndex(ContainedObjects, switch)\r\n    --zprint(ContainedObjects,'ContainedObjects')\r\n    local z = {}\r\n        if ContainedObjects[1] then\r\n            local getdata = false; if ContainedObjects[1].Nickname ~= nil then getdata = true end\r\n            for i, obj in ipairs(ContainedObjects) do\r\n                local index = i; if getdata then index = index-1 else index = obj.index end\r\n                if switch then\r\n                    for key,find in pairs(switch) do\r\n                        if obj[key] == find then\r\n                            table.insert(z, index)\r\n                        end\r\n                    end\r\n                else\r\n                    table.insert(z, index)\r\n                end\r\n            end\r\n            table.sort(z, function(a,b) return a>b end)\r\n        end\r\n    return z\r\nend\r\n\r\n--------------------------------------------------------------------------------\r\n--- posFromObject(obj,switch) - 'top', 'bot'------------------------------------\r\n--- create a pos value that is just above or below the container object --------\r\n--- switch == 'top' -- Just above container\r\n--- switch == 'bot' -- Just below container\r\n--- switch == number -- use the number to set Y position\r\nfunction takeObjectUtils.placeTopOrBot_ofObject(obj,switch)\r\n    if not switch then switch = 'top' end\r\n        if switch == 'top' then\r\n            return obj.getPosition() + Vector(0, obj.getBounds().size.y+0.01, 0)\r\n        elseif switch =='bot' then\r\n            return obj.getPosition() + Vector(0, -obj.getBounds().size.y-0.01, 0)\r\n        elseif type(switch) == 'number' then\r\n            return Vector(0, switch, 0)\r\n        else\r\n            return Vector(0,0,0)\r\n        end\r\n  --end (This if statment was ended in single line)\r\nend\r\n--------------------------------------------------------------------------------\r\n--- reverseIndexbyTag  ---------------------------------------------------------\r\n--- find only valid taged objects and create a reverse index list for those objects only\r\n--local indexesToRemove = tool.reverseIndexbyTag(TrashBag_ContentData, {tag='DiscardMe_', search=true}, {Name='Deck'})\r\nfunction takeObjectUtils.reverseIndexbyTag(ContainedObjects, tag, switch)\r\n    local z = {}\r\n        local getdata = false; if ContainedObjects[1].Nickname ~= nil then getdata = true end\r\n\r\n        for i, obj in ipairs(ContainedObjects) do\r\n            local index = i; if getdata then index = index-1 else index = obj.index end -- change value for getObjects / getData\r\n            local objtags; if getdata then objtags = obj.Tags else objtags = obj.tags end -- change value for getObjects / getData\r\n            if (tag.tags and objtags) then\r\n                if tool.tags.tagFound(objtags, tag.tags, tag.search) then\r\n                    if switch then\r\n                        for key,find in pairs(switch) do\r\n                            if obj[key] == find then\r\n                                table.insert(z, index)\r\n                            end\r\n                        end\r\n                    else\r\n                        table.insert(z, index)\r\n                    end\r\n                end\r\n            end\r\n        end\r\n\r\n    table.sort(z, function(a,b) return a>b end)\r\n    return z\r\nend\r\n\r\n--------------------------------------------------------------------------------\r\n--------------------------------------------------------------------------------\r\nreturn takeObjectUtils\r\n\nend)\n__bundle_register(\"/_libs/scaleBags/scaleBags\", function(require, _LOADED, __bundle_register, __bundle_modules)\nlocal scaleBags = {}\r\n\r\nlocal tool = {}\r\n      tool.findGMNote=require(\"/_libs/stringUtils/stringUtils\").findGMNoteLine\r\n\r\n--------------------------------------------------------------------------------\r\n--- SCALE BAG ------------------------------------------------------------------\r\nfunction scaleBags.fromContents(bag)\r\n    local contents = bag.getQuantity()\r\n    local data = {}\r\n        data.scale = bag.getScale()\r\n        data.pos = bag.getPosition()\r\n        --data.baseScale = tool.findGMNote(bag.getGMNotes(), 'scaleBase:')\r\n        data.baseScale = Global.getTable('GlobalVariables').BagStackBaseScale[bag.getName()]\r\n\r\n    local offset = bag.getBoundsNormalized().size.y\r\n    bag.setScale(Vector(data.scale.x, data.baseScale+contents*2.5,data.scale.z))\r\n\r\n    local offset = bag.getBoundsNormalized().size.y - offset\r\n    bag.setPosition(data.pos+Vector(0,offset/2,0))\r\n\r\n    --testing\r\n    local test = Global.getTable('GlobalVariables')\r\n    --print(logString())\r\nend\r\n\r\nreturn scaleBags\r\n\nend)\n__bundle_register(\"/_libs/stringUtils/stringUtils\", function(require, _LOADED, __bundle_register, __bundle_modules)\nlocal stringUtils = {}\r\n\r\nfunction stringUtils.findInString(line,key)\r\n    local data = {}\r\n    if string.find(string.lower(line), string.lower(key), 1, true) then\r\n        data.sting = line\r\n        data.found = true\r\n    else\r\n        data.sting = ''\r\n        data.found = false\r\n    end\r\n    return data\r\nend\r\n\r\n-- Test the GM Notes to see if a sub string exists on any given line of the GM Notes. Return the line and a true/false for the find.\r\nfunction stringUtils.findGMNoteLine(gmn, searchStr)\r\n    local data = {}\r\n        data['found'] = false\r\n        data['key'] = stringUtils.splitString(gmn)\r\n\r\n    for k,l in pairs (data.key) do\r\n        if string.find(string.lower(l), string.lower(searchStr), 1, true) then\r\n            data.key = stringUtils.removeSubString(l,searchStr)\r\n            data.found = true\r\n        end\r\n    end\r\n    return data\r\nend\r\n\r\n--Split a string into a table.\r\n---- str : string to split. Only sending this will split the string at each new line.\r\n---- b1 : adding this will split the string at each occourence of this char\r\n---- b2 : adding this will return the substring between two chars\r\nfunction stringUtils.splitString(str, b1, b2)\r\n    local z = {}\r\n        if not str then\r\n            printToAll('splitString(str, sep, b1, b2) : Must Provide a string (at least)', 'Red')\r\n        else\r\n            -- split at NEW LINE\r\n            if not b1 and not b2 then\r\n                for s in str:gmatch(\"[^\\r\\n]+\") do\r\n                    table.insert(z, s)\r\n                end\r\n            else\r\n            -- split at SEPERATOR\r\n                if b1 and not b2 then\r\n                    if b1 == '' then b1 = ' ' end\r\n                    for s in string.gmatch(str, \"([^\"..'%'..b1..\"]+)\") do\r\n                        table.insert(z, s)\r\n                    end\r\n            -- split Between\r\n                elseif b1 and b2 then\r\n                    for s in string.gmatch(str, '%'..b1..'(.-)%'..b2) do\r\n                        table.insert(z, s)\r\n                    end\r\n                end\r\n            end\r\n        end\r\n    return z\r\nend\r\n\r\n--This will return a vector from a string containing the pasted output of the move tool from TTS.\r\n---- {-6.56, 0.92, -13.28} will become : Vector(-6.56, 0.92, -13.28)\r\nfunction stringUtils.findVectorFrom_string(gmn)\r\n    if stringUtils.removeChar_FirstLast(gmn, 0, 1) ~= '{' then\r\n        vec = stringUtils.splitString(gmn, ',')\r\n        for k,v in ipairs(vec) do\r\n            vec[k] = v:gsub(\"%s+\", \"\") -- remove any whote spaces in number\r\n        end\r\n        return Vector(vec[1], vec[2], vec[3])\r\n    else\r\n        local vec = stringUtils.removeChar_FirstLast(gmn, 'first', 'last')\r\n        vec = stringUtils.splitString(vec, ',')\r\n        for k,v in ipairs(vec) do\r\n            vec[k] = v:gsub(\"%s+\", \"\") -- remove any whote spaces in number\r\n        end\r\n        return Vector(vec[1], vec[2], vec[3])\r\n    end\r\nend\r\n\r\n--------------------------------------------------------------------------------\r\n--- Remove Charicters from front or back of string.\r\n-- str : if you only send the str it will remove the 1st and last value of the string.\r\n-- f = Value of ammount you want to cut off from START string = 1234, f=2, result : 34. A Value of 0, dose nothing.\r\n-- b = Value of ammount you want to cut off from END string = 1234, b=2, result : 12. A Value of 0, dose nothing.\r\n-- b If you use a positive value it will cut from the front... so 12345, f=0,b=3, result = 123\r\nfunction stringUtils.removeChar_FirstLast(str, f, b)\r\n    -- Set Defaults for Front and Back. This will chop off nothing. (as in full string)\r\n    f = f or 1\r\n    b = b or -1\r\n\r\n    if type(f) == \"string\" then\r\n        -- Test of the prams are the strings \"first\". Then ajust values to cut of the first and last char of the string.\r\n        -- if a invalid string retun default value\r\n        if f == 'first' then\r\n            f = 2\r\n        else\r\n            f = 1\r\n        end\r\n    else\r\n        if f >  0 then f = f+1 end\r\n    end\r\n\r\n    if type(b) == \"string\" then\r\n        -- Test of the prams are the strings \"last\". Then ajust values to cut of the first and last char of the string.\r\n        -- if a invalid string retun default value\r\n        if b == 'last' then\r\n            b = -2\r\n        else\r\n            b = -1\r\n        end\r\n    else\r\n        if b < 0 then b = b-1 end\r\n    end\r\n    return string.sub(str, f, b)\r\nend\r\n\r\nfunction stringUtils.removeSubString(s,sub)\r\n   return s:gsub(sub,\"\")\r\nend\r\n\r\nfunction stringUtils.removeWhiteSpace(s)\r\n   return s:gsub(\"%s+\", \"\")\r\nend\r\n\r\nreturn stringUtils\r\n\nend)\n__bundle_register(\"/_libs/shuffleUtils/shuffleContainer\", function(require, _LOADED, __bundle_register, __bundle_modules)\nlocal shuffleContainer = {}\r\n\r\nlocal tool = {}\r\n      tool.findGMNote=require(\"/_libs/stringUtils/stringUtils\").findGMNoteLine\r\n      tool.findTag=require(\"/_libs/tagUtils/tagUtils\").allObjectInBagHaveTagThatMatchesBag\r\n\r\nlocal hexC=require(\"/_libs/stringUtils/stringColours\")\r\n\r\n\r\n-- Shuffle Container.\r\nfunction shuffleContainer.container(bag)\r\n    local shuffle = false\r\n    local errorRestrict = true\r\n    if bag.getQuantity() > 0 then\r\n        -- If container has tag ShuffleBagRestricted, all items in bag must share the ID_ tag of the bag itself.\r\n        if bag.hasTag('ShuffleBagRestricted') then\r\n            local searchResults = tool.findTag(bag, 'ID_') -- true means search the string, instead of exact match\r\n            if not searchResults.objsNotMissingTag then\r\n                printToAll(hexC.red..'Shuffle Error : '..hexC.orange..bag.getName()..hexC.yellow..' contains at least 1 invalid object.')\r\n                errorRestrict = false\r\n            else\r\n                shuffle = true\r\n            end\r\n        else\r\n            shuffle = true\r\n        end\r\n    end\r\n\r\n    if bag.getQuantity() > 1 and shuffle == true then\r\n        printToAll(hexC.yellow..'Shuffling : '..hexC.orange..bag.getName()..'.')\r\n        bag.shuffle()\r\n    elseif bag.getQuantity() == 1 and shuffle == true then\r\n        printToAll(hexC.red..'No Shuffle : '..hexC.orange..bag.getName()..hexC.yellow..' only has 1 item.')\r\n    elseif errorRestrict then\r\n        printToAll(hexC.red..'No Shuffle : '..hexC.orange..bag.getName()..hexC.yellow..' is empty.')\r\n    end\r\n\r\nend\r\n\r\nreturn shuffleContainer\r\n\nend)\n__bundle_register(\"/_libs/stringUtils/stringColours\", function(require, _LOADED, __bundle_register, __bundle_modules)\nlocal stringColours = {}\r\n\r\nstringColours.black  = '['..Color.black:toHex(false)..']'\r\nstringColours.blue   = '['..Color.blue:toHex(false)..']'\r\nstringColours.brown  = '['..Color.brown:toHex(false)..']'\r\nstringColours.green  = '['..Color.green:toHex(false)..']'\r\nstringColours.grey   = '['..Color.grey:toHex(false)..']'\r\nstringColours.orange = '['..Color.orange:toHex(false)..']'\r\nstringColours.pink   = '['..Color.pink:toHex(false)..']'\r\nstringColours.purple = '['..Color.purple:toHex(false)..']'\r\nstringColours.red    = '['..Color.red:toHex(false)..']'\r\nstringColours.teal   = '['..Color.teal:toHex(false)..']'\r\nstringColours.white  = '['..Color.white:toHex(false)..']'\r\nstringColours.yellow = '['..Color.yellow:toHex(false)..']'\r\nstringColours.close  = '[-]'\r\n\r\nreturn stringColours\r\n\r\n\r\n--[[\r\nBlack Blue Brown Green Grey Orange Pink Purple Red Teal White Yellow\r\nstringColours.Yellow = '['..Color.fromString(\"Yellow\"):toHex()..']'\r\n]]\r\n\nend)\n__bundle_register(\"/_libs/WaitUtils/waitUtils\", function(require, _LOADED, __bundle_register, __bundle_modules)\nlocal waitUtils = {}\r\n\r\nlocal wait_ids ={}\r\n\r\nfunction waitUtils.dropIntoBox(bag, obj, func, time) -- '0.8'\r\n    time = time or 0.8\r\n    if wait_ids[bag] then Wait.stop(wait_ids[bag]) end\r\n    wait_ids[bag] = Wait.time(function() func(bag) end, time)\r\nend\r\n\r\nfunction waitUtils.frames(func, time, ...)--(bag, obj, func, time) -- '0.8'\r\n    time = time or 0.8\r\n    --if wait_ids[bag] then Wait.stop(wait_ids[bag]) end\r\n    --wait_ids[bag] = Wait.time(function() func(bag) end, time)\r\n    local args = {...}\r\n    Wait.frames(function() func(args) end, time)\r\nend\r\n\r\nfunction waitUtils.countClicks(obj,func,delay)\r\n    print('IN : waitUtils.countClicks')\r\n    local delay = delay or 0.8 -- better way of setting default parameters\r\n    wait_ids[obj] = wait_ids[obj] or { -- just to be sure there's no attempt to index a nil value later we set an empty table first.\r\n      count = 0, -- We set the count to 0 here when the table is made\r\n    }\r\n\r\n    function delayCall()\r\n        func(wait_ids[obj].count)\r\n        wait_ids[obj].waitID = nil -- remove the wait id when the function is called\r\n        wait_ids[obj].count = 0  -- We set the count to 0 here when the wait has ended due to timeout\r\n    end\r\n\r\n    if wait_ids[obj].waitID then Wait.stop(wait_ids[obj].waitID); wait_ids[obj].waitID = nil end -- end the previous wait if it exists\r\n    wait_ids[obj].waitID = Wait.time(delayCall, delay) -- make a new wait, but with _no_ count\r\n\r\n    wait_ids[obj].count = wait_ids[obj].count + 1 -- finally increment the click amount.\r\nend\r\n\r\nreturn waitUtils\r\n\nend)\n__bundle_register(\"/_libs/onModLoad/onModLoad\", function(require, _LOADED, __bundle_register, __bundle_modules)\nlocal onModLoad = {}\r\n--------------------------------------------------------------------------------\r\n--- MEGA FREEZE -- (Freeze by tag \"MegaFreeze\", and Freeze by zone tagged with MegaFreeze) func('scriptzoneGUID', 'anyting')\r\nfunction onModLoad.MegaFreeze(FreezeByGuidTable)\r\n    local objectList = {}\r\n    for _, obj in pairs(getObjectsWithTag('MegaFreeze')) do\r\n        if obj.type == 'Scripting' then\r\n            for k,o in pairs(obj.getObjects(true)) do\r\n                objectList[o] = o.interactable\r\n            end\r\n        else\r\n            objectList[obj] = obj.interactable\r\n        end\r\n    end\r\n\r\n    if FreezeByGuidTable then\r\n        for _, guid in ipairs(FreezeByGuidTable) do\r\n            print('----------- FREEZE BY GUID -----------')\r\n            objectList[getObjectFromGUID(guid)] = getObjectFromGUID(guid).interactable\r\n        end\r\n    end\r\n\r\n    for o,v in pairs(objectList) do\r\n        if o.interactable then\r\n            o.interactable = false\r\n        else\r\n            o.interactable = true\r\n        end\r\n    end\r\nend\r\n    --[[for _, obj in pairs(getObjectsWithTag('MegaFreeze')) do\r\n        if obj.type == 'Scripting' then\r\n            for k,o in pairs(obj.getObjects(true)) do\r\n                --o.setLock(true)\r\n                if o.interactable then\r\n                    o.interactable = false\r\n                else\r\n                    o.interactable = true\r\n                end\r\n            end\r\n        else\r\n            --obj.setLock(true)\r\n            if obj.interactable then\r\n                obj.interactable = false\r\n            else\r\n                obj.interactable = true\r\n            end\r\n        end\r\n    end\r\n\r\n    --Freeze Objects from a table of GUIDS\r\n    if FreezeByGuidTable then\r\n        for _, guid in ipairs(FreezeByGuidTable) do\r\n            print('----------- FREEZE BY GUID -----------')\r\n            --o.setLock(true)\r\n            --getObjectFromGUID(guid).interactable = false\r\n            if getObjectFromGUID(guid).interactable then\r\n                getObjectFromGUID(guid).interactable = false\r\n            else\r\n                getObjectFromGUID(guid).interactable = true\r\n            end\r\n        end\r\n    end]]\r\n\r\n\r\n--------------------------------------------------------------------------------\r\n--- Fix Hand Zones - Fixe HandZone Height\r\n    function onModLoad.FixHandZones(yOffset)\r\n        local Y = yOffset\r\n        local playerList = Player.getAvailableColors()\r\n        for _, colour in ipairs(playerList) do\r\n            local pramsOLD = Player[colour].getHandTransform()\r\n            pramsNew = {position={pramsOLD.position.x, Y, pramsOLD.position.z}\r\n                       ,rotation={0,180,0}\r\n                       ,scale={15.50, 5.40, 0.82}\r\n                       }\r\n            Player[colour].setHandTransform(pramsNew, 1)\r\n        end\r\n    end\r\n--------------------------------------------------------------------------------\r\nreturn onModLoad\r\n\nend)\nreturn __bundle_require(\"__root\")",
  "LuaScriptState": "",
  "XmlUI": "<!-- Xml UI. See documentation: https://api.tabletopsimulator.com/ui/introUI/ -->",
  "SnapPoints": [
    {
      "Position": {
        "x": 19.9922848,
        "y": 0.9612171,
        "z": 29.03849
      }
    },
    {
      "Position": {
        "x": -17.3042622,
        "y": 0.9612171,
        "z": 29.86241
      }
    },
    {
      "Position": {
        "x": -18.112381,
        "y": 0.9612171,
        "z": 28.440527
      }
    },
    {
      "Position": {
        "x": -16.4842567,
        "y": 0.9612171,
        "z": 28.4405251
      }
    },
    {
      "Position": {
        "x": -17.3009415,
        "y": 0.9612171,
        "z": 27.0339012
      }
    },
    {
      "Position": {
        "x": -17.3,
        "y": 0.9612171,
        "z": 32.42453
      }
    },
    {
      "Position": {
        "x": -7.794228,
        "y": 1.15344608,
        "z": 188.999863
      }
    },
    {
      "Position": {
        "x": -34.8569221,
        "y": 0.9612171,
        "z": 28.2253952
      }
    },
    {
      "Position": {
        "x": -32.60924,
        "y": 0.9612171,
        "z": 28.225275
      }
    },
    {
      "Position": {
        "x": -33.7700043,
        "y": 0.9612171,
        "z": 31.4999962
      }
    },
    {
      "Position": {
        "x": 18.4139233,
        "y": 0.9612171,
        "z": 34.70752
      }
    },
    {
      "Position": {
        "x": 22.4958553,
        "y": 0.9612171,
        "z": 34.5075569
      }
    },
    {
      "Position": {
        "x": -50.6624832,
        "y": 1.11191463,
        "z": 165.750015
      }
    },
    {
      "Position": {
        "x": -48.0644073,
        "y": 1.11117744,
        "z": 165.750015
      }
    },
    {
      "Position": {
        "x": -45.46633,
        "y": 1.111082,
        "z": 165.750015
      }
    },
    {
      "Position": {
        "x": -42.8682556,
        "y": 1.11133718,
        "z": 165.750015
      }
    },
    {
      "Position": {
        "x": -40.27018,
        "y": 1.11175466,
        "z": 165.750015
      }
    },
    {
      "Position": {
        "x": -71.31109,
        "y": 0.9611349,
        "z": 29.6894226
      }
    },
    {
      "Position": {
        "x": -41.0353432,
        "y": 0.9611349,
        "z": 35.3031235
      }
    },
    {
      "Position": {
        "x": -41.02023,
        "y": 0.9611349,
        "z": 31.0499973
      }
    },
    {
      "Position": {
        "x": -18.9,
        "y": 0.9611349,
        "z": 35.7
      }
    },
    {
      "Position": {
        "x": -28.7600079,
        "y": 0.9611349,
        "z": 34.28
      }
    },
    {
      "Position": {
        "x": -28.76,
        "y": 0.9611349,
        "z": 28.69
      }
    },
    {
      "Position": {
        "x": -21.33,
        "y": 0.9611349,
        "z": 28.6900024
      }
    },
    {
      "Position": {
        "x": -21.3300419,
        "y": 0.9611349,
        "z": 34.28
      }
    },
    {
      "Position": {
        "x": -23.57472,
        "y": 0.9611349,
        "z": 36.4839745
      }
    },
    {
      "Position": {
        "x": -25.1038876,
        "y": 0.9611349,
        "z": 36.4839745
      }
    },
    {
      "Position": {
        "x": -26.61598,
        "y": 0.9611349,
        "z": 36.4839745
      }
    },
    {
      "Position": {
        "x": -41.02,
        "y": 0.9611349,
        "z": 27.77799
      }
    },
    {
      "Position": {
        "x": -43.18596,
        "y": 0.9611349,
        "z": 27.85009
      }
    },
    {
      "Position": {
        "x": -38.88611,
        "y": 0.9611349,
        "z": 27.8538055
      }
    },
    {
      "Position": {
        "x": -58.77,
        "y": 1.09906244,
        "z": 75.99
      },
      "Rotation": {
        "x": 0.05366689,
        "y": 179.976669,
        "z": 359.93277
      }
    },
    {
      "Position": {
        "x": -54.27,
        "y": 1.10570908,
        "z": 75.99
      },
      "Rotation": {
        "x": 0.05366557,
        "y": 179.9716,
        "z": 359.93277
      }
    },
    {
      "Position": {
        "x": -49.7700081,
        "y": 1.10972381,
        "z": 75.98999
      },
      "Rotation": {
        "x": 0.05366046,
        "y": 179.974365,
        "z": 359.93277
      }
    },
    {
      "Position": {
        "x": -45.2800064,
        "y": 1.11628878,
        "z": 75.98999
      },
      "Rotation": {
        "x": 0.0537027121,
        "y": 180.003052,
        "z": 359.9328
      }
    },
    {
      "Position": {
        "x": -40.7800026,
        "y": 1.11970294,
        "z": 75.99
      },
      "Rotation": {
        "x": 0.05366348,
        "y": 179.9744,
        "z": 359.93277
      }
    },
    {
      "Position": {
        "x": -37.3978424,
        "y": 0.9611349,
        "z": 31.35
      },
      "Rotation": {
        "x": -3.08454958E-07,
        "y": -0.00129160623,
        "z": 3.32671948E-06
      }
    }
  ],
  "ObjectStates": [
    {
      "GUID": "44ccdc",
      "Name": "HandTrigger",
      "Transform": {
        "posX": 49.5846748,
        "posY": 10.0,
        "posZ": -69.04228,
        "rotX": 0.0,
        "rotY": 180.0,
        "rotZ": 0.0,
        "scaleX": 15.5,
        "scaleY": 5.4,
        "scaleZ": 0.82
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 0.191999972,
        "g": 0.701,
        "b": 0.167999953,
        "a": 0.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": false,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "FogColor": "Green",
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "7cb754",
      "Name": "HandTrigger",
      "Transform": {
        "posX": -30.4153175,
        "posY": 10.0,
        "posZ": -69.04228,
        "rotX": 0.0,
        "rotY": 180.0,
        "rotZ": 0.0,
        "scaleX": 15.5,
        "scaleY": 5.4,
        "scaleZ": 0.82
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 0.117999978,
        "g": 0.53,
        "b": 1.0,
        "a": 0.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": false,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "FogColor": "Blue",
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "f9f164",
      "Name": "HandTrigger",
      "Transform": {
        "posX": 69.58468,
        "posY": 10.0,
        "posZ": -69.04228,
        "rotX": 0.0,
        "rotY": 180.0,
        "rotZ": 0.0,
        "scaleX": 15.5,
        "scaleY": 5.4,
        "scaleZ": 0.82
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 0.627,
        "g": 0.124999978,
        "b": 0.941,
        "a": 0.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": false,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "FogColor": "Purple",
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "97892f",
      "Name": "HandTrigger",
      "Transform": {
        "posX": -50.4153252,
        "posY": 10.0,
        "posZ": -69.04228,
        "rotX": 0.0,
        "rotY": 180.0,
        "rotZ": 0.0,
        "scaleX": 15.5,
        "scaleY": 5.4,
        "scaleZ": 0.82
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 0.905,
        "g": 0.898,
        "b": 0.171999961,
        "a": 0.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": false,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "FogColor": "Yellow",
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "f1100b",
      "Name": "HandTrigger",
      "Transform": {
        "posX": 29.5846863,
        "posY": 10.0,
        "posZ": -69.04228,
        "rotX": 0.0,
        "rotY": 180.0,
        "rotZ": 0.0,
        "scaleX": 15.5,
        "scaleY": 5.4,
        "scaleZ": 0.82
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 0.856,
        "g": 0.09999997,
        "b": 0.09399996,
        "a": 0.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": false,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "FogColor": "Red",
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "684bb6",
      "Name": "HandTrigger",
      "Transform": {
        "posX": 9.584698,
        "posY": 10.0,
        "posZ": -69.04228,
        "rotX": 0.0,
        "rotY": 180.0,
        "rotZ": 0.0,
        "scaleX": 15.5,
        "scaleY": 5.4,
        "scaleZ": 0.82
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 0.9559999,
        "g": 0.39199996,
        "b": 0.112999953,
        "a": 0.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": false,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "FogColor": "Orange",
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "33f840",
      "Name": "HandTrigger",
      "Transform": {
        "posX": -10.4153023,
        "posY": 10.0,
        "posZ": -69.04228,
        "rotX": 0.0,
        "rotY": 180.0,
        "rotZ": 0.0,
        "scaleX": 15.5,
        "scaleY": 5.4,
        "scaleZ": 0.82
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0,
        "a": 0.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": false,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "FogColor": "White",
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "9edf6f",
      "Name": "HandTrigger",
      "Transform": {
        "posX": -70.41534,
        "posY": 10.0,
        "posZ": -69.04228,
        "rotX": 0.0,
        "rotY": 180.0,
        "rotZ": 0.0,
        "scaleX": 15.5,
        "scaleY": 5.4,
        "scaleZ": 0.82
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 0.96,
        "g": 0.438999981,
        "b": 0.807,
        "a": 0.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": false,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "FogColor": "Pink",
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "7c3034",
      "Name": "go_game_piece_white",
      "Transform": {
        "posX": 0.0,
        "posY": 7.42090225,
        "posZ": 0.0,
        "rotX": -2.75083653E-06,
        "rotY": 359.989,
        "rotZ": 1.97965437E-05,
        "scaleX": 5.80000353,
        "scaleY": 5.80000353,
        "scaleZ": 5.80000353
      },
      "Nickname": "_(Tool) - Floor EDIT",
      "Description": "pos:{0,-50,0}\nscale:{13,1,13}\n",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 0.6617647,
        "g": 0.6617647,
        "b": 0.6617647
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": false,
      "Snap": false,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "LuaScript": "-- Bundled by luabundle {\"version\":\"1.6.0\"}\nlocal __bundle_require, __bundle_loaded, __bundle_register, __bundle_modules = (function(superRequire)\n\tlocal loadingPlaceholder = {[{}] = true}\n\n\tlocal register\n\tlocal modules = {}\n\n\tlocal require\n\tlocal loaded = {}\n\n\tregister = function(name, body)\n\t\tif not modules[name] then\n\t\t\tmodules[name] = body\n\t\tend\n\tend\n\n\trequire = function(name)\n\t\tlocal loadedModule = loaded[name]\n\n\t\tif loadedModule then\n\t\t\tif loadedModule == loadingPlaceholder then\n\t\t\t\treturn nil\n\t\t\tend\n\t\telse\n\t\t\tif not modules[name] then\n\t\t\t\tif not superRequire then\n\t\t\t\t\tlocal identifier = type(name) == 'string' and '\\\"' .. name .. '\\\"' or tostring(name)\n\t\t\t\t\terror('Tried to require ' .. identifier .. ', but no such module has been registered')\n\t\t\t\telse\n\t\t\t\t\treturn superRequire(name)\n\t\t\t\tend\n\t\t\tend\n\n\t\t\tloaded[name] = loadingPlaceholder\n\t\t\tloadedModule = modules[name](require, loaded, register, modules)\n\t\t\tloaded[name] = loadedModule\n\t\tend\n\n\t\treturn loadedModule\n\tend\n\n\treturn require, loaded, register, modules\nend)(nil)\n__bundle_register(\"__root\", function(require, _LOADED, __bundle_register, __bundle_modules)\nrequire(\"_tools/editFloor/editFloor\")\nend)\n__bundle_register(\"_tools/editFloor/editFloor\", function(require, _LOADED, __bundle_register, __bundle_modules)\nlocal TopLabel = 'Make Editable' -- Name of Top Button\r\nlocal BotLabel = 'Clear Scene' -- Name of Bot Button\r\nlocal MinButtonLength = 2500\r\nlocal Floor = nil\r\nlocal vec = nil\r\n\r\nlocal tool = require(\"/_libs/stringUtils/stringUtils\")\r\n      tool.wait = require(\"/_libs/waitUtils/waitUtils\").frames\r\n\r\nfunction onload()\r\n    --self.setScale({2.30,2.30,2.30})\r\n    setGlobalVariables()\r\n    makeButtons()\r\nend\r\n\r\nfunction setGlobalVariables()\r\n    Floor = getObjectsWithTag('RoomFloor')[1]\r\n\r\n    local data = {}\r\n    data.notes = tool.splitString(self.getDescription())\r\n    data.pos = {}\r\n    data.scale = {}\r\n    for k,line in pairs(data.notes) do\r\n        local pos = tool.findInString(line, 'pos:')\r\n        local pos = tool.findInString(line, 'pos:')\r\n        local scale = tool.findInString(line, 'scale:')\r\n        if pos.found then\r\n            data.pos = tool.findVectorFrom_string(tool.removeSubString(line, 'pos:'))\r\n        end\r\n        if scale.found then\r\n            data.scale = tool.findVectorFrom_string(tool.removeSubString(line, 'scale:'))\r\n        end\r\n    end\r\n    Vec = {p=data.pos,\r\n           r=Vector(0, 0, 0),\r\n           s=data.scale}\r\nend\r\n--------------------------------------------------------------------------------\r\n-- Place Demo Code in Here -----------------------------------------------------\r\nfunction Top_Left_Click(obj, color, alt_click)\r\n    printToAll('Changing Floor Collidor', 'Orange')\r\n    local Data = Floor.getData()\r\n    local doSpawn = hasCollidor(Data.CustomMesh.ColliderURL)\r\n    if doSpawn then\r\n        Data.CustomMesh.ColliderURL = ''\r\n    else\r\n        Data.CustomMesh.ColliderURL = 'http://cloud-3.steamusercontent.com/ugc/769486305402304582/B11411698E91EB8916B8F1C4396BBF715449ADA5/'\r\n    end\r\n    --print(logString(vec))\r\n    destroyObject(Floor)\r\n    Floor = spawnObjectData({data = Data, position=Vec.p, rotation=Vec.r, scale=Vec.s, sound=true})\r\n\r\n    if doSpawn then\r\n        tool.wait(function()\r\n                printToAll(' - Setting Floor to Editable', 'Green')\r\n                Floor.interactable = true\r\n        end,5)\r\n    else\r\n        printToAll(' - Setting Floor to Inactive', 'Red')\r\n        Floor.interactable = false\r\n    end\r\nend\r\n\r\nfunction hasCollidor(ColliderURL)\r\n    if ColliderURL == '' then\r\n        return false\r\n    end\r\n    return true\r\nend\r\n\r\nfunction Top_Right_Click(obj, color, alt_click)\r\n    printToAll('Setting Floor to Interactable', 'Orange')\r\n    Floor.interactable = true\r\nend\r\n--------------------------------------------------------------------------------\r\n-- Place Demo Code in Here -----------------------------------------------------\r\nfunction Bot_Left_Click(obj, color, alt_click)\r\n    printToAll('Clear Entire Scene', 'Orange')\r\n    for k,o in pairs(getAllObjects()) do\r\n        if o == self or o == Floor then\r\n        else\r\n            self.setLock(true)\r\n            destroyObject(o)\r\n        end\r\n    end\r\nend\r\n\r\nfunction Bot_Right_Click(obj, color, alt_click)\r\n    printToAll('Destory Floor', 'Orange')\r\n    if Floor ~= nil then\r\n        destroyObject(Floor)\r\n    else\r\n        for k,v in pairs(getAllObjects()) do\r\n            if v.getName() == 'Set : Floor' then\r\n                destroyObject(v)\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\n--******************************************************************************\r\n--*** Ignore Below this line ***************************************************\r\n--******************************************************************************\r\nfunction f_Top(obj, color, alt_click)\r\n    if Floor ~= nil then\r\n        if not alt_click then\r\n            Top_Left_Click(obj, color, alt_click)\r\n        else\r\n            Top_Right_Click(obj, color, alt_click)\r\n        end\r\n    end\r\nend\r\n\r\nfunction f_Bot(obj, color, alt_click)\r\n    --if Floor ~= nil then\r\n        if not alt_click then\r\n            Bot_Left_Click(obj, color, alt_click)\r\n        else\r\n            Bot_Right_Click(obj, color, alt_click)\r\n        end\r\n    --end\r\nend\r\n--------------------------------------------------------------------------------\r\n--------------------------------------------------------------------------------\r\nfunction makeButtons()\r\n    local lable = nil\r\n    local ButtonList = {};\r\n            local button = {}\r\n                    button.click_function = 'f_Top'\r\n                    button.function_owner = self\r\n                    button.position = setDynamicButtonSizes_pos(TopLabel) --{0,0.5,1}\r\n                    button.rotation = {0,180,0}\r\n                    button.label =  TopLabel\r\n                    button.width = setDynamicButtonSizes_Width(TopLabel, MinButtonLength)\r\n                    button.height = setDynamicButtonSizes_Hight(TopLabel)\r\n                    button.font_size = 250\r\n            table.insert(ButtonList, button)\r\n            button = {}\r\n                    button.click_function = 'f_Bot'\r\n                    button.function_owner = self\r\n                    button.label = BotLabel\r\n                    button.position = setDynamicButtonSizes_pos(BotLabel) --{0,0.5,-1}\r\n                    button.rotation = {0,180,0}\r\n                    button.width = setDynamicButtonSizes_Width(BotLabel, MinButtonLength)\r\n                    button.height = setDynamicButtonSizes_Hight(BotLabel)\r\n                    button.font_size = 250\r\n            table.insert(ButtonList, button)\r\n\r\n    for k, b in pairs (ButtonList) do\r\n        self.createButton(b)\r\n    end\r\nend\r\n\r\nfunction setDynamicButtonSizes_pos(label)\r\n    local posVec = Vector(0,0.5,1)\r\n    local lines = {}\r\n    for line in label:gmatch(\"[^\\r\\n]+\") do\r\n        table.insert(lines, line)\r\n    end\r\n\r\n    adjustZ = 1 + 0.1*#lines\r\n    if label == TopLabel then\r\n        posVec:setAt('z', adjustZ)\r\n    elseif label == BotLabel then\r\n        posVec:setAt('z', -adjustZ)\r\n    end\r\n    --print(logString(lines, 'lines'))\r\n\r\n    return posVec\r\nend\r\n\r\nfunction setDynamicButtonSizes_Hight(lable)\r\n    local minHight = 450\r\n    local lines = {}\r\n    for line in lable:gmatch(\"[^\\r\\n]+\") do\r\n        table.insert(lines, line)\r\n    end\r\n\r\n    local count = #lines\r\n    local adjust_hight = 200\r\n    if count > 1 then\r\n        for i=1, count, 1 do\r\n            minHight = minHight + adjust_hight\r\n        end\r\n    end\r\n    return minHight\r\nend\r\n\r\nfunction setDynamicButtonSizes_Width(str, minWidth)\r\n    local lable = string.upper(str)--str:gsub(\"^%l\", string.upper)\r\n    local lableSize = #lable\r\n    --print(lable)\r\n    local adjust_Width = 100\r\n    local widthBorder = 600\r\n    local Width = 0\r\n\r\n    local lines = {}\r\n    for line in lable:gmatch(\"[^\\r\\n]+\") do\r\n        table.insert(lines, line)\r\n    end\r\n\r\n    local size = 0\r\n    if lines[2] ~= nil then\r\n        for _, line in pairs(lines) do\r\n            if size < #line then size = #line end\r\n        end\r\n        lableSize = size\r\n    end\r\n\r\n\r\n    for i=1, lableSize, 1 do\r\n        Width = Width + adjust_Width\r\n    end\r\n    Width = Width + widthBorder\r\n\r\n    if Width < minWidth then\r\n        Width = minWidth\r\n    end\r\n    return Width\r\nend\r\n\nend)\n__bundle_register(\"/_libs/waitUtils/waitUtils\", function(require, _LOADED, __bundle_register, __bundle_modules)\nlocal waitUtils = {}\r\n\r\nlocal wait_ids ={}\r\n\r\nfunction waitUtils.dropIntoBox(bag, obj, func, time) -- '0.8'\r\n    time = time or 0.8\r\n    if wait_ids[bag] then Wait.stop(wait_ids[bag]) end\r\n    wait_ids[bag] = Wait.time(function() func(bag) end, time)\r\nend\r\n\r\nfunction waitUtils.frames(func, time, ...)--(bag, obj, func, time) -- '0.8'\r\n    time = time or 0.8\r\n    --if wait_ids[bag] then Wait.stop(wait_ids[bag]) end\r\n    --wait_ids[bag] = Wait.time(function() func(bag) end, time)\r\n    local args = {...}\r\n    Wait.frames(function() func(args) end, time)\r\nend\r\n\r\nfunction waitUtils.countClicks(obj,func,delay)\r\n    print('IN : waitUtils.countClicks')\r\n    local delay = delay or 0.8 -- better way of setting default parameters\r\n    wait_ids[obj] = wait_ids[obj] or { -- just to be sure there's no attempt to index a nil value later we set an empty table first.\r\n      count = 0, -- We set the count to 0 here when the table is made\r\n    }\r\n\r\n    function delayCall()\r\n        func(wait_ids[obj].count)\r\n        wait_ids[obj].waitID = nil -- remove the wait id when the function is called\r\n        wait_ids[obj].count = 0  -- We set the count to 0 here when the wait has ended due to timeout\r\n    end\r\n\r\n    if wait_ids[obj].waitID then Wait.stop(wait_ids[obj].waitID); wait_ids[obj].waitID = nil end -- end the previous wait if it exists\r\n    wait_ids[obj].waitID = Wait.time(delayCall, delay) -- make a new wait, but with _no_ count\r\n\r\n    wait_ids[obj].count = wait_ids[obj].count + 1 -- finally increment the click amount.\r\nend\r\n\r\nreturn waitUtils\r\n\nend)\n__bundle_register(\"/_libs/stringUtils/stringUtils\", function(require, _LOADED, __bundle_register, __bundle_modules)\nlocal stringUtils = {}\r\n\r\nfunction stringUtils.findInString(line,key)\r\n    local data = {}\r\n    if string.find(string.lower(line), string.lower(key), 1, true) then\r\n        data.sting = line\r\n        data.found = true\r\n    else\r\n        data.sting = ''\r\n        data.found = false\r\n    end\r\n    return data\r\nend\r\n\r\n-- Test the GM Notes to see if a sub string exists on any given line of the GM Notes. Return the line and a true/false for the find.\r\nfunction stringUtils.findGMNoteLine(gmn, searchStr)\r\n    local data = {}\r\n        data['found'] = false\r\n        data['key'] = stringUtils.splitString(gmn)\r\n\r\n    for k,l in pairs (data.key) do\r\n        if string.find(string.lower(l), string.lower(searchStr), 1, true) then\r\n            data.key = stringUtils.removeSubString(l,searchStr)\r\n            data.found = true\r\n        end\r\n    end\r\n    return data\r\nend\r\n\r\n--Split a string into a table.\r\n---- str : string to split. Only sending this will split the string at each new line.\r\n---- b1 : adding this will split the string at each occourence of this char\r\n---- b2 : adding this will return the substring between two chars\r\nfunction stringUtils.splitString(str, b1, b2)\r\n    local z = {}\r\n        if not str then\r\n            printToAll('splitString(str, sep, b1, b2) : Must Provide a string (at least)', 'Red')\r\n        else\r\n            -- split at NEW LINE\r\n            if not b1 and not b2 then\r\n                for s in str:gmatch(\"[^\\r\\n]+\") do\r\n                    table.insert(z, s)\r\n                end\r\n            else\r\n            -- split at SEPERATOR\r\n                if b1 and not b2 then\r\n                    if b1 == '' then b1 = ' ' end\r\n                    for s in string.gmatch(str, \"([^\"..'%'..b1..\"]+)\") do\r\n                        table.insert(z, s)\r\n                    end\r\n            -- split Between\r\n                elseif b1 and b2 then\r\n                    for s in string.gmatch(str, '%'..b1..'(.-)%'..b2) do\r\n                        table.insert(z, s)\r\n                    end\r\n                end\r\n            end\r\n        end\r\n    return z\r\nend\r\n\r\n--This will return a vector from a string containing the pasted output of the move tool from TTS.\r\n---- {-6.56, 0.92, -13.28} will become : Vector(-6.56, 0.92, -13.28)\r\nfunction stringUtils.findVectorFrom_string(gmn)\r\n    if stringUtils.removeChar_FirstLast(gmn, 0, 1) ~= '{' then\r\n        vec = stringUtils.splitString(gmn, ',')\r\n        for k,v in ipairs(vec) do\r\n            vec[k] = v:gsub(\"%s+\", \"\") -- remove any whote spaces in number\r\n        end\r\n        return Vector(vec[1], vec[2], vec[3])\r\n    else\r\n        local vec = stringUtils.removeChar_FirstLast(gmn, 'first', 'last')\r\n        vec = stringUtils.splitString(vec, ',')\r\n        for k,v in ipairs(vec) do\r\n            vec[k] = v:gsub(\"%s+\", \"\") -- remove any whote spaces in number\r\n        end\r\n        return Vector(vec[1], vec[2], vec[3])\r\n    end\r\nend\r\n\r\n--------------------------------------------------------------------------------\r\n--- Remove Charicters from front or back of string.\r\n-- str : if you only send the str it will remove the 1st and last value of the string.\r\n-- f = Value of ammount you want to cut off from START string = 1234, f=2, result : 34. A Value of 0, dose nothing.\r\n-- b = Value of ammount you want to cut off from END string = 1234, b=2, result : 12. A Value of 0, dose nothing.\r\n-- b If you use a positive value it will cut from the front... so 12345, f=0,b=3, result = 123\r\nfunction stringUtils.removeChar_FirstLast(str, f, b)\r\n    -- Set Defaults for Front and Back. This will chop off nothing. (as in full string)\r\n    f = f or 1\r\n    b = b or -1\r\n\r\n    if type(f) == \"string\" then\r\n        -- Test of the prams are the strings \"first\". Then ajust values to cut of the first and last char of the string.\r\n        -- if a invalid string retun default value\r\n        if f == 'first' then\r\n            f = 2\r\n        else\r\n            f = 1\r\n        end\r\n    else\r\n        if f >  0 then f = f+1 end\r\n    end\r\n\r\n    if type(b) == \"string\" then\r\n        -- Test of the prams are the strings \"last\". Then ajust values to cut of the first and last char of the string.\r\n        -- if a invalid string retun default value\r\n        if b == 'last' then\r\n            b = -2\r\n        else\r\n            b = -1\r\n        end\r\n    else\r\n        if b < 0 then b = b-1 end\r\n    end\r\n    return string.sub(str, f, b)\r\nend\r\n\r\nfunction stringUtils.removeSubString(s,sub)\r\n   return s:gsub(sub,\"\")\r\nend\r\n\r\nfunction stringUtils.removeWhiteSpace(s)\r\n   return s:gsub(\"%s+\", \"\")\r\nend\r\n\r\nreturn stringUtils\r\n\nend)\nreturn __bundle_require(\"__root\")",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "51b6fc",
      "Name": "Custom_Model",
      "Transform": {
        "posX": 0.0,
        "posY": -50.0,
        "posZ": 0.0,
        "rotX": 0.0,
        "rotY": 0.0,
        "rotZ": 0.0,
        "scaleX": 13.0,
        "scaleY": 1.0,
        "scaleZ": 13.0
      },
      "Nickname": "SceneSet : RoomFloor",
      "Description": "",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "Tags": [
        "RoomFloor",
        "Scene_Set"
      ],
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": true,
      "Snap": false,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": false,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomMesh": {
        "MeshURL": "http://cloud-3.steamusercontent.com/ugc/769486305402266729/0878EA3B55667CABFC79ACAFA0453476B003A797/",
        "DiffuseURL": "http://cloud-3.steamusercontent.com/ugc/769486305402305106/869057A234E50F7A1314ADD288ED2C78726B9CF3/",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 1,
        "TypeIndex": 4,
        "CustomShader": {
          "SpecularColor": {
            "r": 0.875,
            "g": 0.812880337,
            "b": 0.7463235
          },
          "SpecularIntensity": 0.0,
          "SpecularSharpness": 2.0,
          "FresnelStrength": 0.0
        },
        "CastShadows": false
      },
      "LuaScript": "function onLoad(save_state)\r\n    self.interactable = false\r\n    self.setLock(true)\r\nend",
      "LuaScriptState": "",
      "XmlUI": ""
    }
  ]
}