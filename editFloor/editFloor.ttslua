local TopLabel = 'Make Editable' -- Name of Top Button
local BotLabel = 'Clear Scene' -- Name of Bot Button
local MinButtonLength = 2500
local Floor = nil
local vec = nil

local tool = require("/_libs/stringUtils/stringUtils")
      tool.wait = require("/_libs/waitUtils/waitUtils").frames

function onload()
    --self.setScale({2.30,2.30,2.30})
    setGlobalVariables()
    makeButtons()
end

function setGlobalVariables()
    Floor = getObjectsWithTag('RoomFloor')[1]

    local data = {}
    data.notes = tool.splitString(self.getDescription())
    data.pos = {}
    data.scale = {}
    for k,line in pairs(data.notes) do
        local pos = tool.findInString(line, 'pos:')
        local pos = tool.findInString(line, 'pos:')
        local scale = tool.findInString(line, 'scale:')
        if pos.found then
            data.pos = tool.findVectorFrom_string(tool.removeSubString(line, 'pos:'))
        end
        if scale.found then
            data.scale = tool.findVectorFrom_string(tool.removeSubString(line, 'scale:'))
        end
    end
    Vec = {p=data.pos,
           r=Vector(0, 0, 0),
           s=data.scale}
end
--------------------------------------------------------------------------------
-- Place Demo Code in Here -----------------------------------------------------
function Top_Left_Click(obj, color, alt_click)
    printToAll('Changing Floor Collidor', 'Orange')
    local Data = Floor.getData()
    local doSpawn = hasCollidor(Data.CustomMesh.ColliderURL)
    if doSpawn then
        Data.CustomMesh.ColliderURL = ''
    else
        Data.CustomMesh.ColliderURL = 'http://cloud-3.steamusercontent.com/ugc/769486305402304582/B11411698E91EB8916B8F1C4396BBF715449ADA5/'
    end
    --print(logString(vec))
    destroyObject(Floor)
    Floor = spawnObjectData({data = Data, position=Vec.p, rotation=Vec.r, scale=Vec.s, sound=true})

    if doSpawn then
        tool.wait(function()
                printToAll(' - Setting Floor to Editable', 'Green')
                Floor.interactable = true
        end,5)
    else
        printToAll(' - Setting Floor to Inactive', 'Red')
        Floor.interactable = false
    end
end

function hasCollidor(ColliderURL)
    if ColliderURL == '' then
        return false
    end
    return true
end

function Top_Right_Click(obj, color, alt_click)
    printToAll('Setting Floor to Interactable', 'Orange')
    Floor.interactable = true
end
--------------------------------------------------------------------------------
-- Place Demo Code in Here -----------------------------------------------------
function Bot_Left_Click(obj, color, alt_click)
    printToAll('Clear Entire Scene', 'Orange')
    for k,o in pairs(getAllObjects()) do
        if o == self or o == Floor then
        else
            self.setLock(true)
            destroyObject(o)
        end
    end
end

function Bot_Right_Click(obj, color, alt_click)
    printToAll('Destory Floor', 'Orange')
    if Floor ~= nil then
        destroyObject(Floor)
    else
        for k,v in pairs(getAllObjects()) do
            if v.getName() == 'Set : Floor' then
                destroyObject(v)
            end
        end
    end
end

--******************************************************************************
--*** Ignore Below this line ***************************************************
--******************************************************************************
function f_Top(obj, color, alt_click)
    if Floor ~= nil then
        print('????????')
        if not alt_click then
            Top_Left_Click(obj, color, alt_click)
        else
            Top_Right_Click(obj, color, alt_click)
        end
    end
end

function f_Bot(obj, color, alt_click)
    --if Floor ~= nil then
        if not alt_click then
            Bot_Left_Click(obj, color, alt_click)
        else
            Bot_Right_Click(obj, color, alt_click)
        end
    --end
end
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
function makeButtons()
    local lable = nil
    local ButtonList = {};
            local button = {}
                    button.click_function = 'f_Top'
                    button.function_owner = self
                    button.position = setDynamicButtonSizes_pos(TopLabel) --{0,0.5,1}
                    button.rotation = {0,180,0}
                    button.label =  TopLabel
                    button.width = setDynamicButtonSizes_Width(TopLabel, MinButtonLength)
                    button.height = setDynamicButtonSizes_Hight(TopLabel)
                    button.font_size = 250
            table.insert(ButtonList, button)
            button = {}
                    button.click_function = 'f_Bot'
                    button.function_owner = self
                    button.label = BotLabel
                    button.position = setDynamicButtonSizes_pos(BotLabel) --{0,0.5,-1}
                    button.rotation = {0,180,0}
                    button.width = setDynamicButtonSizes_Width(BotLabel, MinButtonLength)
                    button.height = setDynamicButtonSizes_Hight(BotLabel)
                    button.font_size = 250
            table.insert(ButtonList, button)

    for k, b in pairs (ButtonList) do
        self.createButton(b)
    end
end

function setDynamicButtonSizes_pos(label)
    local posVec = Vector(0,0.5,1)
    local lines = {}
    for line in label:gmatch("[^\r\n]+") do
        table.insert(lines, line)
    end

    adjustZ = 1 + 0.1*#lines
    if label == TopLabel then
        posVec:setAt('z', adjustZ)
    elseif label == BotLabel then
        posVec:setAt('z', -adjustZ)
    end
    --print(logString(lines, 'lines'))

    return posVec
end

function setDynamicButtonSizes_Hight(lable)
    local minHight = 450
    local lines = {}
    for line in lable:gmatch("[^\r\n]+") do
        table.insert(lines, line)
    end

    local count = #lines
    local adjust_hight = 200
    if count > 1 then
        for i=1, count, 1 do
            minHight = minHight + adjust_hight
        end
    end
    return minHight
end

function setDynamicButtonSizes_Width(str, minWidth)
    local lable = string.upper(str)--str:gsub("^%l", string.upper)
    local lableSize = #lable
    --print(lable)
    local adjust_Width = 100
    local widthBorder = 600
    local Width = 0

    local lines = {}
    for line in lable:gmatch("[^\r\n]+") do
        table.insert(lines, line)
    end

    local size = 0
    if lines[2] ~= nil then
        for _, line in pairs(lines) do
            if size < #line then size = #line end
        end
        lableSize = size
    end


    for i=1, lableSize, 1 do
        Width = Width + adjust_Width
    end
    Width = Width + widthBorder

    if Width < minWidth then
        Width = minWidth
    end
    return Width
end
